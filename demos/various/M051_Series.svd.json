{
    "schema": {
        "name": "register-description-format",
        "version": "v1"
    },
    "root": {
        "desc": "M05x_registers",
        "version": "0.1",
        "children": [
            "adc",
            "clk",
            "ebi_ctl",
            "fmc",
            "gcr",
            "gp0",
            "gp1",
            "gp2",
            "gp3",
            "gp4",
            "gpio",
            "gp0_bits",
            "gp1_bits",
            "gp2_bits",
            "gp3_bits",
            "gp4_bits",
            "i2c",
            "int",
            "pwma",
            "pwmb",
            "scs",
            "tmr0",
            "tmr1",
            "tmr2",
            "tmr3",
            "wdt",
            "spi0",
            "spi1",
            "uart0",
            "uart1"
        ]
    },
    "elements": {
        "adc": {
            "type": "blk",
            "children": [
                "adc.addr0",
                "adc.addr1",
                "adc.addr2",
                "adc.addr3",
                "adc.addr4",
                "adc.addr5",
                "adc.addr6",
                "adc.addr7",
                "adc.adcr",
                "adc.adcher",
                "adc.adcmpr0",
                "adc.adcmpr1",
                "adc.adsr",
                "adc.adcalr"
            ],
            "id": "adc",
            "name": "adc",
            "offset": "0x400e0000",
            "doc": "Registers group"
        },
        "adc.addr0": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 18,
                    "nbits": 14,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "valid",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Valid Flag\n1 = Data in RSLT[11:0] bits is valid.\n0 = Data in RSLT[11:0] bits is not valid.\nThis bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read."
                },
                {
                    "name": "overrun",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Over Run Flag\n1 = Data in RSLT[11:0] is overwrite.\n0 = Data in RSLT[11:0] is recent conversion result.\nIf converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1. It will be cleared by hardware after ADDR register is read."
                },
                {
                    "name": "rsvd0",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rslt",
                    "lsb": 0,
                    "nbits": 12,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "A/D Conversion Result\nThis field contains 12 bits conversion result."
                }
            ],
            "id": "adc.addr0",
            "name": "addr0",
            "offset": "0x0",
            "doc": "A/D Data Register 0"
        },
        "adc.addr1": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 18,
                    "nbits": 14,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "valid",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Valid Flag\n1 = Data in RSLT[11:0] bits is valid.\n0 = Data in RSLT[11:0] bits is not valid.\nThis bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read."
                },
                {
                    "name": "overrun",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Over Run Flag\n1 = Data in RSLT[11:0] is overwrite.\n0 = Data in RSLT[11:0] is recent conversion result.\nIf converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1. It will be cleared by hardware after ADDR register is read."
                },
                {
                    "name": "rsvd0",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rslt",
                    "lsb": 0,
                    "nbits": 12,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "A/D Conversion Result\nThis field contains 12 bits conversion result."
                }
            ],
            "id": "adc.addr1",
            "name": "addr1",
            "offset": "0x4",
            "doc": "A/D Data Register 1"
        },
        "adc.addr2": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 18,
                    "nbits": 14,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "valid",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Valid Flag\n1 = Data in RSLT[11:0] bits is valid.\n0 = Data in RSLT[11:0] bits is not valid.\nThis bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read."
                },
                {
                    "name": "overrun",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Over Run Flag\n1 = Data in RSLT[11:0] is overwrite.\n0 = Data in RSLT[11:0] is recent conversion result.\nIf converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1. It will be cleared by hardware after ADDR register is read."
                },
                {
                    "name": "rsvd0",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rslt",
                    "lsb": 0,
                    "nbits": 12,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "A/D Conversion Result\nThis field contains 12 bits conversion result."
                }
            ],
            "id": "adc.addr2",
            "name": "addr2",
            "offset": "0x8",
            "doc": "A/D Data Register 2"
        },
        "adc.addr3": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 18,
                    "nbits": 14,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "valid",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Valid Flag\n1 = Data in RSLT[11:0] bits is valid.\n0 = Data in RSLT[11:0] bits is not valid.\nThis bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read."
                },
                {
                    "name": "overrun",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Over Run Flag\n1 = Data in RSLT[11:0] is overwrite.\n0 = Data in RSLT[11:0] is recent conversion result.\nIf converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1. It will be cleared by hardware after ADDR register is read."
                },
                {
                    "name": "rsvd0",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rslt",
                    "lsb": 0,
                    "nbits": 12,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "A/D Conversion Result\nThis field contains 12 bits conversion result."
                }
            ],
            "id": "adc.addr3",
            "name": "addr3",
            "offset": "0xc",
            "doc": "A/D Data Register 3"
        },
        "adc.addr4": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 18,
                    "nbits": 14,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "valid",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Valid Flag\n1 = Data in RSLT[11:0] bits is valid.\n0 = Data in RSLT[11:0] bits is not valid.\nThis bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read."
                },
                {
                    "name": "overrun",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Over Run Flag\n1 = Data in RSLT[11:0] is overwrite.\n0 = Data in RSLT[11:0] is recent conversion result.\nIf converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1. It will be cleared by hardware after ADDR register is read."
                },
                {
                    "name": "rsvd0",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rslt",
                    "lsb": 0,
                    "nbits": 12,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "A/D Conversion Result\nThis field contains 12 bits conversion result."
                }
            ],
            "id": "adc.addr4",
            "name": "addr4",
            "offset": "0x10",
            "doc": "A/D Data Register 4"
        },
        "adc.addr5": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 18,
                    "nbits": 14,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "valid",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Valid Flag\n1 = Data in RSLT[11:0] bits is valid.\n0 = Data in RSLT[11:0] bits is not valid.\nThis bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read."
                },
                {
                    "name": "overrun",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Over Run Flag\n1 = Data in RSLT[11:0] is overwrite.\n0 = Data in RSLT[11:0] is recent conversion result.\nIf converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1. It will be cleared by hardware after ADDR register is read."
                },
                {
                    "name": "rsvd0",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rslt",
                    "lsb": 0,
                    "nbits": 12,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "A/D Conversion Result\nThis field contains 12 bits conversion result."
                }
            ],
            "id": "adc.addr5",
            "name": "addr5",
            "offset": "0x14",
            "doc": "A/D Data Register 5"
        },
        "adc.addr6": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 18,
                    "nbits": 14,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "valid",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Valid Flag\n1 = Data in RSLT[11:0] bits is valid.\n0 = Data in RSLT[11:0] bits is not valid.\nThis bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read."
                },
                {
                    "name": "overrun",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Over Run Flag\n1 = Data in RSLT[11:0] is overwrite.\n0 = Data in RSLT[11:0] is recent conversion result.\nIf converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1. It will be cleared by hardware after ADDR register is read."
                },
                {
                    "name": "rsvd0",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rslt",
                    "lsb": 0,
                    "nbits": 12,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "A/D Conversion Result\nThis field contains 12 bits conversion result."
                }
            ],
            "id": "adc.addr6",
            "name": "addr6",
            "offset": "0x18",
            "doc": "A/D Data Register 6"
        },
        "adc.addr7": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 18,
                    "nbits": 14,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "valid",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Valid Flag\n1 = Data in RSLT[11:0] bits is valid.\n0 = Data in RSLT[11:0] bits is not valid.\nThis bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read."
                },
                {
                    "name": "overrun",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Over Run Flag\n1 = Data in RSLT[11:0] is overwrite.\n0 = Data in RSLT[11:0] is recent conversion result.\nIf converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1. It will be cleared by hardware after ADDR register is read."
                },
                {
                    "name": "rsvd0",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rslt",
                    "lsb": 0,
                    "nbits": 12,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "A/D Conversion Result\nThis field contains 12 bits conversion result."
                }
            ],
            "id": "adc.addr7",
            "name": "addr7",
            "offset": "0x1c",
            "doc": "A/D Data Register 7"
        },
        "adc.adcr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 12,
                    "nbits": 20,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "adst",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "A/D Conversion Start\n1 = Conversion start.\n0 = Conversion stopped and A/D converter enter idle state.\nADST bit can be controlled by two sources: software write and external pin STADC. ADST is cleared to 0 by hardware automatically at the ends of single mode and single-cycle scan mode on specified channels. In continuous scan mode, A/D conversion is continuously performed sequentially until this bit is cleared to 0 or chip reset."
                },
                {
                    "name": "diffen",
                    "lsb": 10,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "A/D Differential Input Mode Enable\n1 = A/D is in differential analog input mode\n0 = A/D is in single-end analog input mode\nDifferential input voltage (Vdiff) = Vplus - Vminus\nThe Vplus of differential input paired channel 0 is from ADC0 pin; Vminus is from ADC1 pin.\nThe Vplus of differential input paired channel 1 is from ADC2 pin; Vminus is from ADC3 pin.\nThe Vplus of differential input paired channel 2 is from ADC4 pin; Vminus is from ADC5 pin.\nThe Vplus of differential input paired channel 3 is from ADC6 pin; Vminus is from ADC7 pin.\nIn differential input mode, only one of the two corresponding channels needs to be enabled in ADCHER. The conversion result will be placed to the corresponding data register of the enabled channel. If both channels of a differential input paired channel are enabled, the ADC will convert it twice in scan mode. And then write the conversion result to the two corresponding data registers."
                },
                {
                    "name": "rsvd0",
                    "lsb": 9,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "trge",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "External Trigger Enable\nEnable or disable triggering of A/D conversion by external STADC pin.\n1= Enable\n0= Disable"
                },
                {
                    "name": "trgcond",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "External Trigger Condition\nThese two bits decide external pin STADC trigger event is level or edge. The signal must be kept at stable state at least 8 PCLKs for level trigger and 4 PCLKs at high and low state.\n00 = Low level\n01 = High level\n10 = Falling edge\n11 = Rising edge"
                },
                {
                    "name": "trgs",
                    "lsb": 4,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Hardware Trigger Source\n00 = A/D conversion is started by external STADC pin.\nOthers = Reserved\nSoftware should disable TRGE and ADST before change TRGS. \nIn hardware trigger mode, the ADST bit is set by the external trigger from STADC."
                },
                {
                    "name": "admd",
                    "lsb": 2,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "A/D Converter Operation Mode\n00 = Single conversion\n01 = Burst conversion\n10 = Single-cycle scan\n11 = Continuous scan\nWhen changing the operation mode, software should disable ADST bit firstly.\nNote: In Burst Mode, the A/D result data always at Data Register 0."
                },
                {
                    "name": "adie",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "A/D Interrupt Enable\n1 = Enable A/D interrupt function\n0 = Disable A/D interrupt function\nA/D conversion end interrupt request is generated if ADIE bit is set to 1."
                },
                {
                    "name": "aden",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "A/D Converter Enable\n1 = Enable\n0 = Disable\nBefore starting A/D conversion function, this bit should be set to 1. Clear it to 0 to disable A/D converter analog circuit for saving power consumption."
                }
            ],
            "id": "adc.adcr",
            "name": "adcr",
            "offset": "0x20",
            "doc": "A/D Control Register"
        },
        "adc.adcher": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 10,
                    "nbits": 22,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "presel",
                    "lsb": 8,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Analog Input Channel 7 select\n00: External analog input\n01: Internal bandgap voltage\n1x: Reserved"
                },
                {
                    "name": "chen7",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Analog Input Channel 7 Enable\n1 = Enable\n0 = Disable"
                },
                {
                    "name": "chen6",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Analog Input Channel 6 Enable\n1 = Enable\n0 = Disable"
                },
                {
                    "name": "chen5",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Analog Input Channel 5 Enable\n1 = Enable\n0 = Disable"
                },
                {
                    "name": "chen4",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Analog Input Channel 4 Enable\n1 = Enable\n0 = Disable"
                },
                {
                    "name": "chen3",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Analog Input Channel 3 Enable\n1 = Enable\n0 = Disable"
                },
                {
                    "name": "chen2",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Analog Input Channel 2 Enable\n1 = Enable\n0 = Disable"
                },
                {
                    "name": "chen1",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Analog Input Channel 1 Enable\n1 = Enable\n0 = Disable"
                },
                {
                    "name": "chen0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Analog Input Channel 0 Enable\n1 = Enable\n0 = Disable\nThis channel is the default enabled channel if CHEN0~7 are set as 0s."
                }
            ],
            "id": "adc.adcher",
            "name": "adcher",
            "offset": "0x24",
            "doc": "A/D Channel Enable Register"
        },
        "adc.adcmpr0": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd2",
                    "lsb": 28,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cmpd",
                    "lsb": 16,
                    "nbits": 12,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Comparison Data\nThe 12 bits data is used to compare with conversion result of specified channel. Software can use it to monitor the external analog input pin voltage transition in scan mode without imposing a load on software."
                },
                {
                    "name": "rsvd1",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cmpmatcnt",
                    "lsb": 8,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Compare Match Count\nWhen the specified A/D channel analog conversion result matches the compare condition defined by CMPCOND[2], the internal match counter will increase 1. When the internal counter reaches the value to (CMPMATCNT +1), the CMPF0 bit will be set."
                },
                {
                    "name": "rsvd0",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cmpch",
                    "lsb": 3,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Compare Channel Selection\n000 = Channel 0 conversion result is selected to be compared.\n001 = Channel 1 conversion result is selected to be compared.\n010 = Channel 2 conversion result is selected to be compared.\n011 = Channel 3 conversion result is selected to be compared.\n100 = Channel 4 conversion result is selected to be compared.\n101 = Channel 5 conversion result is selected to be compared.\n110 = Channel 6 conversion result is selected to be compared.\n111 = Channel 7 conversion result is selected to be compared."
                },
                {
                    "name": "cmpcond",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Compare Condition\n1= Set the compare condition as that when a 12-bit A/D conversion result is greater or equal to the 12-bit CMPD(ADCMPR0[27:16]), the internal match counter will increase one.\n0= Set the compare condition as that when a 12-bit A/D conversion result is less than the 12-bit CMPD(ADCMPR0[27:16]), the internal match counter will increase one.\nNote: When the internal counter reaches the value to (CMPMATCNT +1), the CMPF0 bit will be set."
                },
                {
                    "name": "cmpie",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Compare Interrupt Enable\n1 = Enable compare function interrupt.\n0 = Disable compare function interrupt.\nIf the compare function is enabled and the compare condition matches the settings of CMPCOND and CMPMATCNT, CMPF0 bit will be asserted. If CMPIE is set to 1, a compare interrupt request is generated."
                },
                {
                    "name": "cmpen",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Compare Enable\n1 = Enable compare.\n0 = Disable compare.\nSet this bit to 1 to enable compare CMPD[11:0] with specified channel conversion result when converted data is loaded into ADDR register."
                }
            ],
            "id": "adc.adcmpr0",
            "name": "adcmpr0",
            "offset": "0x28",
            "doc": "A/D Compare Register 0"
        },
        "adc.adcmpr1": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd2",
                    "lsb": 28,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cmpd",
                    "lsb": 16,
                    "nbits": 12,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Comparison Data\nThe 12 bits data is used to compare with conversion result of specified channel. Software can use it to monitor the external analog input pin voltage transition in scan mode without imposing a load on software."
                },
                {
                    "name": "rsvd1",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cmpmatcnt",
                    "lsb": 8,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Compare Match Count\nWhen the specified A/D channel analog conversion result matches the compare condition defined by CMPCOND[2], the internal match counter will increase 1. When the internal counter reaches the value to (CMPMATCNT +1), the CMPF1 bit will be set."
                },
                {
                    "name": "rsvd0",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cmpch",
                    "lsb": 3,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Compare Channel Selection\n000 = Channel 0 conversion result is selected to be compared.\n001 = Channel 1 conversion result is selected to be compared.\n010 = Channel 2 conversion result is selected to be compared.\n011 = Channel 3 conversion result is selected to be compared.\n100 = Channel 4 conversion result is selected to be compared.\n101 = Channel 5 conversion result is selected to be compared.\n110 = Channel 6 conversion result is selected to be compared.\n111 = Channel 7 conversion result is selected to be compared."
                },
                {
                    "name": "cmpcond",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Compare Condition\n1= Set the compare condition as that when a 12-bit A/D conversion result is greater or equal to the 12-bit CMPD(ADCMPR1[27:16]), the internal match counter will increase one.\n0= Set the compare condition as that when a 12-bit A/D conversion result is less than the 12-bit CMPD(ADCMPR1[27:16]), the internal match counter will increase one.\nNote: When the internal counter reaches the value to (CMPMATCNT +1), the CMPF1 bit will be set."
                },
                {
                    "name": "cmpie",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Compare Interrupt Enable\n1 = Enable compare function interrupt.\n0 = Disable compare function interrupt.\nIf the compare function is enabled and the compare condition matches the setting of CMPCOND and CMPMATCNT, CMPF1 bit will be asserted. If CMPIE is set to 1, a compare interrupt request is generated."
                },
                {
                    "name": "cmpen",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Compare Enable\n1 = Enable compare.\n0 = Disable compare.\nSet this bit to 1 to enable compare CMPD[11:0] with specified channel conversion result when converted data is loaded into ADDR register."
                }
            ],
            "id": "adc.adcmpr1",
            "name": "adcmpr1",
            "offset": "0x2c",
            "doc": "A/D Compare Register 1"
        },
        "adc.adsr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "overrun",
                    "lsb": 16,
                    "nbits": 8,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Over Run flag\nIt is a mirror to OVERRUN bit in ADDRx\nWhen ADC is in Burst Mode, and the buffer is overrun, OVERRUN[7:0] will all set to 1."
                },
                {
                    "name": "valid",
                    "lsb": 8,
                    "nbits": 8,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Data Valid flag\nIt is a mirror of VALID bit in ADDRx\nWhen ADC is in Burst Mode, and there is at least one valid conversion result in buffer, VALID[7:0] will all set to 1."
                },
                {
                    "name": "rsvd0",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "channel",
                    "lsb": 4,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Current Conversion Channel\nThis filed reflects current conversion channel when BUSY=1. When BUSY=0, it shows the next channel will be converted.\nIt is read only."
                },
                {
                    "name": "busy",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "BUSY/IDLE\n1 = A/D converter is busy at conversion.\n0 = A/D converter is in idle state.\nThis bit is mirror of as ADST bit in ADCR.\nIt is read only."
                },
                {
                    "name": "cmpf1",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Compare Flag\nWhen the selected channel A/D conversion result meets the setting conditions of ADCMPR1 then this bit will be set to 1. And it can be cleared by writing 1 to itself.\n1 = Conversion result in ADDR meets ADCMPR1 setting\n0 = Conversion result in ADDR does not meet ADCMPR1 setting"
                },
                {
                    "name": "cmpf0",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Compare Flag\nWhen the selected channel A/D conversion result meets the setting conditions of ADCMPR0 then this bit will be set to 1. And it can be cleared by writing 1 to itself.\n1 = Conversion result in ADDR meets ADCMPR0 setting\n0 = Conversion result in ADDR does not meet ADCMPR0 setting"
                },
                {
                    "name": "adf",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "A/D Conversion End Flag\nA status flag that indicates the end of A/D conversion.\nADF is set to 1 at these two conditions:\nWhen A/D conversion ends in single mode\nWhen A/D conversion ends on all specified channels in scan mode.\nWhen more than 4 samples in FIFO in Burst mode.\nThis bit can be cleared by writing 1 to itself."
                }
            ],
            "id": "adc.adsr",
            "name": "adsr",
            "offset": "0x30",
            "doc": "A/D Status Register"
        },
        "adc.adcalr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 2,
                    "nbits": 30,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "caldone",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Calibration is Done\n1 = A/D converter self calibration is done.\n0 = A/D converter has not been calibrated or calibration is in progress if CALEN bit is set.\nWhen 0 is written to CALEN bit, CALDONE bit is cleared by hardware immediately. It is a read only bit."
                },
                {
                    "name": "calen",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Self Calibration Enable\n1 = Enable self calibration\n0 = Disable self calibration\nSoftware can set this bit to 1 enables A/D converter to do self calibration function. It needs 127 ADC clocks to complete calibration. This bit must be kept at 1 after CALDONE asserted. Clearing this bit will disable self calibration function."
                }
            ],
            "id": "adc.adcalr",
            "name": "adcalr",
            "offset": "0x34",
            "doc": "A/D Calibration Register"
        },
        "clk": {
            "type": "blk",
            "children": [
                "clk.pwrcon",
                "clk.ahbclk",
                "clk.apbclk",
                "clk.clkstatus",
                "clk.clksel0",
                "clk.clksel1",
                "clk.clkdiv",
                "clk.clksel2",
                "clk.pllcon",
                "clk.frqdiv"
            ],
            "id": "clk",
            "name": "clk",
            "offset": "0x50000200",
            "doc": "Registers group"
        },
        "clk.pwrcon": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 9,
                    "nbits": 23,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pd_wait_cpu",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "This bit control the power down entry condition\n1 = Chip entry power down mode when the both PWR_DOWN and CPU run WFI instruction.\n0 = Chip entry power down mode when the PWR_DOWN bit is set to 1"
                },
                {
                    "name": "pwr_down_en",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "System power down enable bit\nWhen set this bit \"1\", the chip power down mode is enabled and the chip power down active is depend on the PD_WAIT_CPU bit\n(a) if the PD_WAIT_CPU is \"0\" then the chip power down after the PWR_DOWN_EN bit set.\n(b) if the PD_WAIT_CPU is \"1\" then the chip keep active till the CPU sleep mode also active and then the chip power down\nWhen chip wake up from power down, this bit is auto cleared, user need to set this bit again for next power down.\nWhen in power down mode, external crystal (4~ 24MHz) and the 22.1184 MHz OSC will be disabled in this mode, but the 10 kHz OSC is not controlled by power down mode. \nWhen in power down mode, the PLL and system clock are disabled, and ignored the clock source selection. The clocks of peripheral are not controlled by power down mode, if the peripheral clock source is from 10 kHz oscillator.\n1 = Chip enter the power down mode instant or wait CPU sleep command WFI\n0 = Chip operate in normal mode or CPU in idle mode (sleep mode) because of WFI command"
                },
                {
                    "name": "pd_wu_sts",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Chip power down wake up status flag\nSet by \"power down wake up\", it indicates that resume from power down mode \nThe flag is set if the GPIO(P0~P4), UART wakeup\nWrite 1 to clear the bit \nNote: This bit is working only if PD_WU_INT_EN (PWRCON[5]) set to 1. "
                },
                {
                    "name": "pd_wu_int_en",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Power down mode wake Up Interrupt Enable\n0 = Disable\n1 = Enable. The interrupt will occur when Power down mode (Deep Sleep Mode) wakeup."
                },
                {
                    "name": "pd_wu_dly",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Enable the wake up delay counter.\nWhen the chip wakes up from power down mode, the clock control will delay certain clock cycles to wait system clock stable.\nThe delayed clock cycle is 4096 clock cycles when chip work at external crystal (4 ~ 24MHz), and 256 clock cycles when chip work at 22.1184 MHz oscillator.\n1 = Enable the clock cycle delay\n0 = Disable the clock cycle delay"
                },
                {
                    "name": "osc10k_en",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Internal 10KHz Oscillator Control\n1 = 10KHz Oscillation enable \n0 = 10KHz Oscillation disable "
                },
                {
                    "name": "osc22m_en",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Internal 22.1184 MHz Oscillator Control\n1 = 22.1184 MHz Oscillation enable \n0 = 22.1184 MHz Oscillation disable "
                },
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "xtl12m_en",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "External Crystal Oscillator Control\nThe bit default value is set by flash controller user configuration register config0 [26:24]. When the default clock source is from external crystal. The bit is auto set to \"1\"\n1 = Crystal oscillation enable \n0 = Crystal oscillation disable "
                }
            ],
            "id": "clk.pwrcon",
            "name": "pwrcon",
            "offset": "0x0",
            "doc": "System Power Down Control Register"
        },
        "clk.ahbclk": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 4,
                    "nbits": 28,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ebi_en",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "EBI Controller Clock Enable Control.\n1 = To enable the EBI Controller clock.\n0 = To disable the EBI Controller clock."
                },
                {
                    "name": "isp_en",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Flash ISP Controller Clock Enable Control.\n1 = To enable the Flash ISP controller clock.\n0 = To disable the Flash ISP controller clock."
                },
                {
                    "name": "rsvd0",
                    "lsb": 0,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "clk.ahbclk",
            "name": "ahbclk",
            "offset": "0x4",
            "doc": "AHB Devices Clock Enable Control Register"
        },
        "clk.apbclk": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd6",
                    "lsb": 29,
                    "nbits": 3,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "adc_en",
                    "lsb": 28,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Analog-Digital-Converter (ADC) Clock Enable Control.\n1 = Enable ADC clock\n0 = Disable ADC clock"
                },
                {
                    "name": "rsvd5",
                    "lsb": 24,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pwm67_en",
                    "lsb": 23,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM_67 Clock Enable Control.\n1 = Enable PWM67 clock\n0 = Disable PWM67 clock"
                },
                {
                    "name": "pwm45_en",
                    "lsb": 22,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM_45 Clock Enable Control.\n1 = Enable PWM45 clock\n0 = Disable PWM45 clock"
                },
                {
                    "name": "pwm23_en",
                    "lsb": 21,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM_23 Clock Enable Control.\n1 = Enable PWM23 clock\n0 = Disable PWM23 clock"
                },
                {
                    "name": "pwm01_en",
                    "lsb": 20,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM_01 Clock Enable Control.\n1 = Enable PWM01 clock\n0 = Disable PWM01 clock"
                },
                {
                    "name": "rsvd4",
                    "lsb": 18,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "uart1_en",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "UART1 Clock Enable Control.\n1 = Enable UART1 clock\n0 = Disable UART1 clock"
                },
                {
                    "name": "uart0_en",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "UART0 Clock Enable Control.\n1 = Enable UART0 clock\n0 = Disable UART0 clock"
                },
                {
                    "name": "rsvd3",
                    "lsb": 14,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "spi1_en",
                    "lsb": 13,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "SPI1 Clock Enable Control. \n0 = Disable SPI1 Clock\n1 = Enable SPI1 Clock"
                },
                {
                    "name": "spi0_en",
                    "lsb": 12,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "SPI0 Clock Enable Control. \n0 = Disable SPI0 Clock\n1 = Enable SPI0 Clock"
                },
                {
                    "name": "rsvd2",
                    "lsb": 9,
                    "nbits": 3,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2c_en",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C Clock Enable Control. \n0 = Disable I2C Clock\n1 = Enable I2C Clock"
                },
                {
                    "name": "rsvd1",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "fdiv_en",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Clock Divider Clock Enable Control\n0 = Disable FDIV Clock\n1 = Enable FDIV Clock"
                },
                {
                    "name": "tmr3_en",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer3 Clock Enable Control\n0 = Disable Timer3 Clock\n1 = Enable Timer3 Clock"
                },
                {
                    "name": "tmr2_en",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer2 Clock Enable Control\n0 = Disable Timer2 Clock\n1 = Enable Timer2 Clock"
                },
                {
                    "name": "tmr1_en",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer1 Clock Enable Control\n0 = Disable Timer1 Clock\n1 = Enable Timer1 Clock"
                },
                {
                    "name": "tmr0_en",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer0 Clock Enable Control\n0 = Disable Timer0 Clock\n1 = Enable Timer0 Clock"
                },
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "wdt_en",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Watch Dog Timer Clock Enable.\nThis bit is the protected bit, program this need a open lock sequence, write \"59h\",\"16h\",\"88h\" to address 0x5000_0100 to un-lock this bit. Reference the register REGWRPROT at address GCR_BA + 0x100\n0 = Disable Watchdog Timer Clock\n1 = Enable Watchdog Timer Clock"
                }
            ],
            "id": "clk.apbclk",
            "name": "apbclk",
            "offset": "0x8",
            "doc": "APB Devices Clock Enable Control Register"
        },
        "clk.clkstatus": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd2",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "clk_sw_fail",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Clock switch fail flag\n1 = Clock switch fail\n0 = Clock switch success\nThis bit will be set when target switch clock source is not stable. Write 1 to clear this bit to zero."
                },
                {
                    "name": "rsvd1",
                    "lsb": 5,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "osc22m_stb",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "OSC22M clock source stable flag\n1 = OSC22M clock is stable\n0 = OSC22M clock is not stable or not enable"
                },
                {
                    "name": "osc10k_stb",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "OSC10K clock source stable flag\n1 = OSC10K clock is stable\n0 = OSC10K clock is not stable or not enable"
                },
                {
                    "name": "pll_stb",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "PLL clock source stable flag\n1 = PLL clock is stable\n0 = PLL clock is not stable or not enable"
                },
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "xtl12m_stb",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "XTL12M clock source stable flag\n1 = External Crystal clock is stable\n0 = External Crystal clock is not stable or not enable"
                }
            ],
            "id": "clk.clkstatus",
            "name": "clkstatus",
            "offset": "0xc",
            "doc": "Clock status monitor Register"
        },
        "clk.clksel0": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 6,
                    "nbits": 26,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "stclk_s",
                    "lsb": 3,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "7",
                    "doc": "MCU Cortex_M0 SysTick clock source select.\nThese bits are protected bit, program this need an open lock sequence, write \"59h\",\"16h\",\"88h\" to address 0x5000_0100 to un-lock this bit. Reference the register REGWRPROT at address GCR_BA + 0x100\n000 = Clock source from external crystal clock (4 ~ 24MHz)\n010 = Clock source from external crystal clock (4 ~ 24MHz)/2\n011 = clock source from HCLK/2\n1xx = clock source from internal 22.1184 MHz oscillator clock/2"
                },
                {
                    "name": "hclk_s",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "7",
                    "doc": "HCLK clock source select.\nNote:\nBefore clock switch the related clock sources (pre-select and new-select) must be turn on\nThe 3-bit default value is reloaded with the value of Config0.CFOSC[26:24] in user configuration register in Flash controller by any reset. Therefore the default value is either 000b or 111b.\nThese bits are protected bit, program this need an open lock sequence, write \"59h\",\"16h\",\"88h\" to address 0x5000_0100 to un-lock this bit. Reference the register REGWRPROT at address GCR_BA + 0x100\n000 = clock source from external crystal clock (4 ~ 24MHz)\n010 = clock source from PLL clock\n011 = clock source from internal 10KHz oscillator clock\n111 = clock source from internal 22.1184 MHz oscillator clock\nothers = Reserved"
                }
            ],
            "id": "clk.clksel0",
            "name": "clksel0",
            "offset": "0x10",
            "doc": "Clock Source Select Control Register 0"
        },
        "clk.clksel1": {
            "type": "reg",
            "fields": [
                {
                    "name": "pwm23_s",
                    "lsb": 30,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "PWM2 and PWM3 clock source select.\nPWM2 and PWM3 uses the same Engine clock source, both of them with the same pre-scalar\n00 = clock source from external crystal clock (4 ~ 24MHz)\n10 = clock source from HCLK\n11 = clock source from internal 22.1184 MHz oscillator clock"
                },
                {
                    "name": "pwm01_s",
                    "lsb": 28,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "PWM0 and PWM1 clock source select.\nPWM0 and PWM1 uses the same Engine clock source, both of them with the same pre-scalar\n00 = clock source from external crystal clock (4 ~ 24MHz)\n10 = clock source from HCLK\n11 = clock source from internal 22.1184 MHz oscillator clock"
                },
                {
                    "name": "rsvd5",
                    "lsb": 26,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "uart_s",
                    "lsb": 24,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "UART clock source select.\n00 = clock source from external crystal clock (4 ~ 24MHz)\n01 = clock source from PLL clock\n1x = clock source from internal 22.1184 MHz oscillator clock"
                },
                {
                    "name": "rsvd4",
                    "lsb": 23,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "tmr3_s",
                    "lsb": 20,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "7",
                    "doc": "TIMER3 clock source select.\n000 = clock source from external crystal clock (4 ~ 24MHz)\n010 = clock source from HCLK\n011 = clock source from external trigger\n1xx = clock source from internal 22.1184 MHz oscillator clock"
                },
                {
                    "name": "rsvd3",
                    "lsb": 19,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "tmr2_s",
                    "lsb": 16,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "7",
                    "doc": "TIMER2 clock source select.\n000 = clock source from external crystal clock (4 ~ 24MHz)\n010 = clock source from HCLK\n011 = clock source from external trigger\n1xx = clock source from internal 22.1184 MHz oscillator clock"
                },
                {
                    "name": "rsvd2",
                    "lsb": 15,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "tmr1_s",
                    "lsb": 12,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "7",
                    "doc": "TIMER1 clock source select.\n000 = clock source from external crystal clock (4 ~ 24MHz)\n010 = clock source from HCLK\n011 = clock source from external trigger\n1xx = clock source from internal 22.1184 MHz oscillator clock"
                },
                {
                    "name": "rsvd1",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "tmr0_s",
                    "lsb": 8,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "7",
                    "doc": "TIMER0 clock source select.\n000 = clock source from external crystal clock (4 ~ 24MHz)\n010 = clock source from HCLK\n011 = clock source from external trigger\n1xx = clock source from internal 22.1184 MHz oscillator clock"
                },
                {
                    "name": "rsvd0",
                    "lsb": 4,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "adc_s",
                    "lsb": 2,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "ADC clock source select.\n00 = clock source from external crystal clock (4 ~ 24MHz).\n01 = clock source from PLL clock\n1x = clock source from internal 22.1184 MHz oscillator clock"
                },
                {
                    "name": "wdt_s",
                    "lsb": 0,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "Watchdog Timer clock source select.\nThese bits are protected bit, program this need a open lock sequence, write \"59h\",\"16h\",\"88h\" to address 0x5000_0100 to un-lock this bit. Reference the register REGWRPROT at address GCR_BA + 0x100\n00 = clock source from external crystal clock (4 ~ 24MHz).\n10 = clock source from HCLK/2048 clock\n11 = clock source from internal 10KHz oscillator clock"
                }
            ],
            "id": "clk.clksel1",
            "name": "clksel1",
            "offset": "0x14",
            "doc": "Clock Source Select Control Register 1"
        },
        "clk.clkdiv": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd2",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "adc_n",
                    "lsb": 16,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "ADC clock divide number from ADC clock source\nThe ADC clock frequency = (ADC clock source frequency ) / (ADC_N + 1)"
                },
                {
                    "name": "rsvd1",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "uart_n",
                    "lsb": 8,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "UART clock divide number from UART clock source\nThe UART clock frequency = (UART clock source frequency ) / (UART_N + 1)"
                },
                {
                    "name": "rsvd0",
                    "lsb": 4,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "hclk_n",
                    "lsb": 0,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "HCLK clock divide number from HCLK clock source\nThe HCLK clock frequency = (HCLK clock source frequency) / (HCLK_N + 1)"
                }
            ],
            "id": "clk.clkdiv",
            "name": "clkdiv",
            "offset": "0x18",
            "doc": "Clock Divider Number Register"
        },
        "clk.clksel2": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pwm67_s",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "PWM6 and PWM7 clock source select. - PWM6 and PWM7 used the same Engine clock source, both of them with the same pre-scalar\n00 = clock source from external crystal clock (4 ~ 24MHz)\n10 = clock source from HCLK\n11 = clock source from internal 22.1184 MHz oscillator clock"
                },
                {
                    "name": "pwm45_s",
                    "lsb": 4,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "PWM4 and PWM5 clock source select. - PWM4 and PWM5 used the same Engine clock source, both of them with the same pre-scalar\n00 = clock source from external crystal clock (4 ~ 24MHz)\n10 = clock source from HCLK\n11 = clock source from internal 22.1184 MHz oscillator clock"
                },
                {
                    "name": "frqdiv_s",
                    "lsb": 2,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "Clock Divider Clock Source Select\n00 = clock source from external crystal clock (4 ~ 24MHz)\n10 = clock source from HCLK\n11 = clock source from internal 22.1184 MHz oscillator clock"
                },
                {
                    "name": "rsvd0",
                    "lsb": 0,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "clk.clksel2",
            "name": "clksel2",
            "offset": "0x1c",
            "doc": "Clock Source Select Control Register 2"
        },
        "clk.pllcon": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 20,
                    "nbits": 12,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pll_src",
                    "lsb": 19,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PLL Source Clock Select\n1 = PLL source clock from 22.1184 MHz oscillator\n0 = PLL source clock from external crystal clock (4 ~ 24 MHz)"
                },
                {
                    "name": "oe",
                    "lsb": 18,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "PLL OE (FOUT enable) pin Control\n0 = PLL FOUT enable\n1 = PLL FOUT is fixed low"
                },
                {
                    "name": "bp",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PLL Bypass Control\n0 = PLL is in normal mode (default)\n1 = PLL clock output is same as clock input (XTALin)"
                },
                {
                    "name": "pd",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "Power Down Mode. \nIf set the IDLE bit \"1\" in PWRCON register, the PLL will enter power down mode too\n0 = PLL is in normal mode (default)\n1 = PLL is in power-down mode"
                },
                {
                    "name": "out_dv",
                    "lsb": 14,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "PLL Output Divider Control Pins (PLL_OD[1:0])"
                },
                {
                    "name": "in_dv",
                    "lsb": 9,
                    "nbits": 5,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "PLL Input Divider Control Pins (PLL_R[4:0])"
                },
                {
                    "name": "fb_dv",
                    "lsb": 0,
                    "nbits": 9,
                    "access": "read-write",
                    "reset": "46",
                    "doc": "PLL Feedback Divider Control Pins (PLL_F[8:0])"
                }
            ],
            "id": "clk.pllcon",
            "name": "pllcon",
            "offset": "0x20",
            "doc": "PLL Control Register"
        },
        "clk.frqdiv": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 5,
                    "nbits": 27,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "divider_en",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Frequency Divider Enable Bit\n0 = Disable Frequency Divider\n1 = Enable Frequency Divider"
                },
                {
                    "name": "fsel",
                    "lsb": 0,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Divider Output Frequency Selection Bits\nThe formula of output frequency is\nFout = Fin/2(N+1), \nwhere Fin is the input clock frequency, Fout is the frequency of divider output clock, N is the 4-bit value of FSEL[3:0]."
                }
            ],
            "id": "clk.frqdiv",
            "name": "frqdiv",
            "offset": "0x24",
            "doc": "Frequency Divider Control Register"
        },
        "ebi_ctl": {
            "type": "blk",
            "children": [
                "ebi_ctl.ebicon",
                "ebi_ctl.extime"
            ],
            "id": "ebi_ctl",
            "name": "ebi_ctl",
            "offset": "0x50010000",
            "doc": "Registers group"
        },
        "ebi_ctl.ebicon": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd2",
                    "lsb": 19,
                    "nbits": 13,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "exttale",
                    "lsb": 16,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Expand Time of ALE\nThe ALE width (tALE) to latch the address can be controlled by ExttALE.\ntALE = (ExttALE + 1) * MCLK"
                },
                {
                    "name": "rsvd1",
                    "lsb": 11,
                    "nbits": 5,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "mclkdiv",
                    "lsb": 8,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "External Output Clock Divider\nThe frequency of EBI output clock is controlled by MCLKDIV.\n\nMCLKDIV\tOutput clock (MCLK)\t\n000\tHCLK/1\t\n001\tHCLK/2\t\n010\tHCLK/4\t\n011\tHCLK/8\t\n100\tHCLK/16\t\n101\tHCKL/32\t\n11X\tdefault\t\n\nNotice: Default value of output clock is HCLK/1"
                },
                {
                    "name": "rsvd0",
                    "lsb": 2,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "extbw16",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "EBI data width 16 bit\nThis bit defines if the data bus is 8-bit or 16-bit.\n0 = EBI data width is 8 bit\n1 = EBI data width is 16 bit"
                },
                {
                    "name": "exten",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "EBI Enable\nThis bit is the functional enable bit for EBI.\n0 = EBI function is disabled\n1 = EBI function is enabled"
                }
            ],
            "id": "ebi_ctl.ebicon",
            "name": "ebicon",
            "offset": "0x0",
            "doc": "External Bus Interface General Control Register"
        },
        "ebi_ctl.extime": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd3",
                    "lsb": 28,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "extir2r",
                    "lsb": 24,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Idle State Cycle Between Read-Read\nWhen read action is finish and next action is going to read, idle state is inserted and nCS return to high if ExtIR2R is not zero.\nIdle state cycle = (ExtIR2R * MCLK)"
                },
                {
                    "name": "rsvd1",
                    "lsb": 16,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "extiw2x",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Idle State Cycle After Write\nWhen write action is finish, idle state is inserted and nCS return to high if ExtIW2X is not zero.\nIdle state cycle = (ExtIW2X * MCLK)"
                },
                {
                    "name": "rsvd0",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "exttahd",
                    "lsb": 8,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "EBI Data Access Hold Time\nExttAHD define data access hold time (tAHD).\ntAHD = (ExttAHD + 1) * MCLK"
                },
                {
                    "name": "exttacc",
                    "lsb": 3,
                    "nbits": 5,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "EBI Data Accesss Time\nExttACC define data access time (tACC).\ntACC = (ExttACC + 1) * MCLK"
                },
                {
                    "name": "rsvd2",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "ebi_ctl.extime",
            "name": "extime",
            "offset": "0x4",
            "doc": "External Bus Interface 0 Timing Control Register"
        },
        "fmc": {
            "type": "blk",
            "children": [
                "fmc.ispcon",
                "fmc.ispadr",
                "fmc.ispdat",
                "fmc.ispcmd",
                "fmc.isptrg",
                "fmc.dfbadr",
                "fmc.fatcon"
            ],
            "id": "fmc",
            "name": "fmc",
            "offset": "0x5000c000",
            "doc": "Registers group"
        },
        "fmc.ispcon": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd2",
                    "lsb": 15,
                    "nbits": 17,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "et",
                    "lsb": 12,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Flash Erase Time\nET[2]\tET[1]\tET[0]\tErase Time (ms)\t\n0\t0\t0\t20 (default)\t\n0\t0\t1\t25\t\n0\t1\t0\t30\t\n0\t1\t1\t35\t\n1\t0\t0\t3\t\n1\t0\t1\t5\t\n1\t1\t0\t10\t\n1\t1\t1\t15\t"
                },
                {
                    "name": "rsvd1",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pt",
                    "lsb": 8,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Flash Program Time\nPT[2]\tPT[1]\tPT[0]\tProgram Time (us)\t\n0\t0\t0\t40\t\n0\t0\t1\t45\t\n0\t1\t0\t50\t\n0\t1\t1\t55\t\n1\t0\t0\t20\t\n1\t0\t1\t25\t\n1\t1\t0\t30\t\n1\t1\t1\t35\t"
                },
                {
                    "name": "swrst",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Software Reset\nWriting 1 to this bit to start software reset. \nIt is cleared by hardware after reset is finished."
                },
                {
                    "name": "ispff",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "ISP Fail Flag\nThis bit is set by hardware when a triggered ISP meets any of the following conditions:\n(1) APROM writes to itself.\n(2) LDROM writes to itself. \n(3) Destination address is illegal, such as over an available range.\nWrite 1 to clear."
                },
                {
                    "name": "lduen",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "LDROM Update Enable\nLDROM update enable bit. \n1 = LDROM can be updated when the MCU runs in APROM.\n0 = LDROM cannot be updated"
                },
                {
                    "name": "cfguen",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Config Update Enable\nWriting this bit to 1 enables s/w to update Config value by ISP procedure regardless of program code is running in APROM or LDROM.\n1 = Config update enable \n0 = Config update disable"
                },
                {
                    "name": "rsvd0",
                    "lsb": 2,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "bs",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Boot Select \nThis bit is protected bit. Set/clear this bit to select next booting from LDROM/APROM, respectively. This bit also functions as MCU booting status flag, which can be used to check where MCU booted from. This bit is initiated with the inversed value of CBS in Config0 after power-on reset; It keeps the same value at other reset.\n1 = boot from LDROM\n0 = boot from APROM"
                },
                {
                    "name": "ispen",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "ISP Enable\nThis bit is protected bit. ISP function enable bit. Set this bit to enable ISP function.\n1 = Enable ISP function\n0 = Disable ISP function"
                }
            ],
            "id": "fmc.ispcon",
            "name": "ispcon",
            "offset": "0x0",
            "doc": "ISP Control Register"
        },
        "fmc.ispadr": {
            "type": "reg",
            "fields": [
                {
                    "name": "ispadr",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "ISP Address \nNuMicro M051 series equips with a maximum 16kx32 embedded flash, it supports word program only. ISPARD[1:0] must be kept 2'b00 for ISP operation. "
                }
            ],
            "id": "fmc.ispadr",
            "name": "ispadr",
            "offset": "0x4",
            "doc": "ISP Address Register"
        },
        "fmc.ispdat": {
            "type": "reg",
            "fields": [
                {
                    "name": "ispdat",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "ISP Data \nWrite data to this register before ISP program operation\nRead data from this register after ISP read operation"
                }
            ],
            "id": "fmc.ispdat",
            "name": "ispdat",
            "offset": "0x8",
            "doc": "ISP Data Register"
        },
        "fmc.ispcmd": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 6,
                    "nbits": 26,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "foen_fcen_fctrl",
                    "lsb": 0,
                    "nbits": 6,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "ISP Command \nISP command table is shown below:\nOperation Mode\tFOEN\tFCEN\tFCTRL[3:0]\t\nRead\t0\t0\t0\t0\t0\t0\t\nProgram\t1\t0\t0\t0\t0\t1\t\nPage Erase\t1\t0\t0\t0\t1\t0\t"
                }
            ],
            "id": "fmc.ispcmd",
            "name": "ispcmd",
            "offset": "0xc",
            "doc": "ISP Command Register"
        },
        "fmc.isptrg": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 31,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ispgo",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "ISP start trigger\nWrite 1 to start ISP operation and this bit will be cleared to 0 by hardware automatically when ISP operation is finish.\n\n1 = ISP is on going\n\n0 = ISP done"
                }
            ],
            "id": "fmc.isptrg",
            "name": "isptrg",
            "offset": "0x10",
            "doc": "ISP Trigger Control Register"
        },
        "fmc.dfbadr": {
            "type": "reg",
            "fields": [
                {
                    "name": "dfba",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "read-only",
                    "reset": "126976",
                    "doc": "Data Flash Base Address\nThis register indicates data flash start address.\n\nIt is a read only register.\n\nFor 8/16/32/64kB flash memory device, the data flash size is 4kB and it start address is fixed at 0x01F000 by hardware internally."
                }
            ],
            "id": "fmc.dfbadr",
            "name": "dfbadr",
            "offset": "0x14",
            "doc": "Data Flash Base Address"
        },
        "fmc.fatcon": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 5,
                    "nbits": 27,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "l_speed",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Flash Low Speed Mode Enable\n1 = Flash access always no wait state (zero wait state)\n0 = Insert wait state while Flash access discontinued address. \nNote: Set this bit only when HCLK <= 25MHz. If HCLK > 25MHz, CPU will fetch wrong code and cause fail result."
                },
                {
                    "name": "fats",
                    "lsb": 1,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Flash Access Time Window Select\nThese bits are used to decide flash sense amplifier active duration.\n\n\n\nFATS\tAccess Time window (ns)\t\n000\t40\t\n001\t50\t\n010\t60\t\n011\t70\t\n100\t80\t\n101\t90\t\n110\t100\t\n111\tReserved\t"
                },
                {
                    "name": "fpsen",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Flash Power Save Enable\nIf CPU clock is slower than 24 MHz, then s/w can enable flash power saving function.\n1 = Enable flash power saving\n0 = Disable flash power saving"
                }
            ],
            "id": "fmc.fatcon",
            "name": "fatcon",
            "offset": "0x18",
            "doc": "Flash Access Time Control Register"
        },
        "gcr": {
            "type": "blk",
            "children": [
                "gcr.pdid",
                "gcr.rstsrc",
                "gcr.iprstc1",
                "gcr.iprstc2",
                "gcr.bodcr",
                "gcr.porcr",
                "gcr.p0_mfp",
                "gcr.p1_mfp",
                "gcr.p2_mfp",
                "gcr.p3_mfp",
                "gcr.p4_mfp",
                "gcr.regwrprot"
            ],
            "id": "gcr",
            "name": "gcr",
            "offset": "0x50000000",
            "doc": "Registers group"
        },
        "gcr.pdid": {
            "type": "reg",
            "fields": [
                {
                    "name": "pdid",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "This register reflects device part number code. S/W can read this register to identify which device is used."
                }
            ],
            "id": "gcr.pdid",
            "name": "pdid",
            "offset": "0x0",
            "doc": "Part Device Identification number Register"
        },
        "gcr.rstsrc": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rsts_cpu",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "The RSTS_CPU flag is set by hardware if software writes CPU_RST (IPRSTC1[1]) with a \"1\" to rest Cortex-M0 CPU kernel and Flash memory controller(FMC).\n1= The Cortex-M0 CPU kernel and FMC are reset by software set CPU_RST to 1.\n0= No reset from CPU\nThis bit is cleared by writing 1 to itself."
                },
                {
                    "name": "rsvd0",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rsts_mcu",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "The RSTS_MCU flag is set by the \"reset signal\" from the MCU Cortex_M0 kernel to indicate the previous reset source.\n1= The MCU Cortex_M0 had issued the reset signal to reset the system by software writing 1 to bit SYSRESTREQ(AIRCR[2], Application Interrupt and Reset Control Register) in system control registers of Cortex_M0 kernel.\n0= No reset from MCU\nThis bit is cleared by writing 1 to itself."
                },
                {
                    "name": "rsts_bod",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "The RSTS_BOD flag is set by the \"reset signal\" from the Brown-Out-Detected module to indicate the previous reset source.\n1= The Brown-Out-Detected module had issued the reset signal to reset the system.\n0= No reset from BOD\nThis bit is cleared by writing 1 to itself."
                },
                {
                    "name": "rsts_lvr",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "The RSTS_LVR flag is set by the \"reset signal\" from the Low-Voltage-Reset module to indicate the previous reset source.\n1= The LVR module had issued the reset signal to reset the system.\n0= No reset from LVR\nThis bit is cleared by writing 1 to itself."
                },
                {
                    "name": "rsts_wdt",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "The RSTS_WDT flag is set by the \"reset signal\" from the Watch Dog Timer to indicate the previous reset source.\n1= The Watch Dog Timer had issued the reset signal to reset the system.\n0= No reset from Watch-Dog\nThis bit is cleared by writing 1 to itself."
                },
                {
                    "name": "rsts_reset",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "The RSTS_RESET flag is set by the \"reset signal\" from the /RESET pin to indicate the previous reset source.\n1= The Pin /RESET had issued the reset signal to reset the system.\n0= No reset from Pin /RESET\nThis bit is cleared by writing 1 to itself."
                },
                {
                    "name": "rsts_por",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "The RSTS_POR flag is set by the \"reset signal\" which is from the Power-On Reset (POR) module or bit CHIP_RST (IPRSTC1[0]) is set, to indicate the previous reset source.\n1= The Power-On-Reset(POR) or CHIP_RST=1 had issued the reset signal to reset the system.\n0= No reset from POR\nThis bit is cleared by writing 1 to itself."
                }
            ],
            "id": "gcr.rstsrc",
            "name": "rstsrc",
            "offset": "0x4",
            "doc": "System Reset Source Register"
        },
        "gcr.iprstc1": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 4,
                    "nbits": 28,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ebi_rst",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "EBI Controller Reset\nSet these bit \"1\" will generate a reset signal to the EBI. User need to set this bit to \"0\" to release from the reset state\nThis bit is the protected bit, program this need an open lock sequence, write \"59h\",\"16h\",\"88h\" to address 0x5000_0100 to un-lock this bit. Reference the register REGWRPROT at address GCR_BA + 0x100\n0= Normal operation\n1= EBI IP reset"
                },
                {
                    "name": "rsvd0",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cpu_rst",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "CPU kernel one shot reset.\nSet this bit will reset the Cortex-M0 CPU kernel and Flash memory controller (FMC). This bit will automatically return to \"0\" after the 2 clock cycles\nThis bit is the protected bit, program this need an open lock sequence, write \"59h\",\"16h\",\"88h\" to address 0x5000_0100 to un-lock this bit. Reference the register REGWRPROT at address GCR_BA + 0x100\n0= Normal\n1= Reset CPU"
                },
                {
                    "name": "chip_rst",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "CHIP one shot reset.\nSet this bit will reset the CHIP, including CPU kernel and all peripherals, and this bit will automatically return to \"0\" after the 2 clock cycles.\nThe CHIP_RST is same as the POR reset , all the chip module is reset and the chip setting from flash are also reload\nThis bit is the protected bit, program this need an open lock sequence, write \"59h\",\"16h\",\"88h\" to address 0x5000_0100 to un-lock this bit. Reference the register REGWRPROT at address GCR_BA + 0x100\n0= Normal\n1= Reset CHIP"
                }
            ],
            "id": "gcr.iprstc1",
            "name": "iprstc1",
            "offset": "0x8",
            "doc": "IP Reset Control Resister1"
        },
        "gcr.iprstc2": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd6",
                    "lsb": 29,
                    "nbits": 3,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "adc_rst",
                    "lsb": 28,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "ADC Controller Reset\n0= ADC controller normal operation\n1= ADC controller reset"
                },
                {
                    "name": "rsvd4",
                    "lsb": 22,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pwm47_rst",
                    "lsb": 21,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM4~7 controller Reset\n0= PWM4~7 controller normal operation\n1= PWM4~7 controller reset"
                },
                {
                    "name": "pwm03_rst",
                    "lsb": 20,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM0~3 controller Reset\n0= PWM0~3 controller normal operation\n1= PWM0~3 controller reset"
                },
                {
                    "name": "rsvd3",
                    "lsb": 18,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "uart1_rst",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "UART1 controller Reset\n0 = UART1 controller normal operation\n1 = UART1 controller reset"
                },
                {
                    "name": "uart0_rst",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "UART0 controller Reset\n0= UART0 controller Normal operation\n1= UART0 controller reset"
                },
                {
                    "name": "rsvd2",
                    "lsb": 14,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "spi1_rst",
                    "lsb": 13,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "SPI1 controller Reset\n0= SPI1 controller normal operation\n1= SPI1 controller reset"
                },
                {
                    "name": "spi0_rst",
                    "lsb": 12,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "SPI0 controller Reset\n0= SPI0 controller normal operation\n1= SPI0 controller reset"
                },
                {
                    "name": "rsvd1",
                    "lsb": 9,
                    "nbits": 3,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2c_rst",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C controller Reset\n0= I2C controller normal operation\n1= I2C controller reset"
                },
                {
                    "name": "rsvd0",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "tmr3_rst",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer3 controller Reset\n0= Timer3 controller normal operation\n1= Timer3 controller reset"
                },
                {
                    "name": "tmr2_rst",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer2 controller Reset\n0= Timer2 controller normal operation\n1= Timer2 controller reset"
                },
                {
                    "name": "tmr1_rst",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer1 controller Reset\n0= Timer1 controller normal operation\n1= Timer1 controller reset"
                },
                {
                    "name": "tmr0_rst",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer0 controller Reset\n0= Timer0 controller normal operation\n1= Timer0 controller reset"
                },
                {
                    "name": "gpio_rst",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "GPIO (P0~P4) controller Reset\n0= GPIO controller normal operation\n1= GPIO controller reset"
                },
                {
                    "name": "rsvd5",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "gcr.iprstc2",
            "name": "iprstc2",
            "offset": "0xc",
            "doc": "IP Reset Control Resister 2"
        },
        "gcr.bodcr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "lvr_en",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "Low Voltage Reset Enable (write-protected bit)\nThe LVR function reset the chip when the input power voltage is lower than LVR circuit setting. LVR function is enabled in default.\n1= Enabled Low Voltage Reset function - After enable the bit, the LVR function will active with 100uS delay for LVR output stable.(default).\n0= Disabled Low Voltage Reset function"
                },
                {
                    "name": "bod_out",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "The status for Brown Out Detector output state\n1= Brown Out Detector status output is 1, the detected voltage is lower than BOD_VL setting. If the BOD_EN is \"0\"(disabled), this bit always response \"0\"\n0= Brown Out Detector status output is 0, the detected voltage is higher than BOD_VL setting"
                },
                {
                    "name": "bod_lpm",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Brown Out Detector Low power Mode (write-protected bit)\n1= Enable the BOD low power mode\n0= BOD operate in normal mode (default)\nThe BOD consumes about 100uA in normal mode, the low power mode can reduce the current to about 1/10 but slow the BOD response."
                },
                {
                    "name": "bod_intf",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Brown Out Detector Interrupt Flag\n1= When Brown Out Detector detects the VDD is dropped through the voltage of BOD_VL setting or the VDD is raised up through the voltage of BOD_VL setting, this bit is set to \"1\" and the brown out interrupt is requested if brown out interrupt is enabled.\n0= Brown Out Detector does not detect any voltage draft at VDD down through or up through the voltage of BOD_VL setting."
                },
                {
                    "name": "bod_rsten",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Brown Out Reset Enable (initiated & write-protected bit)\n1= Enable the Brown Out \"RESET\" function, when the Brown Out Detector function is enable and the detected voltage is lower than the threshold then assert a signal to reset the chip\nThe default value is set by flash controller user configuration register config0 bit[20]\n0= Enable the Brown Out \"INTERRUPT\" function, when the Brown Out Detector function is enable and the detected voltage is lower than the threshold then assert a signal to interrupt the MCU Cortex-M0\nWhen the BOD_EN is enabled and the interrupt is assert, the interrupt will keep till to the BOD_EN set to \"0\". The interrupt for CPU can be blocked by disable the NVIC in CPU for BOD interrupt or disable the interrupt source by disable the BOD_EN and then re-enable the BOD_EN function if the BOD function is required"
                },
                {
                    "name": "bod_vl",
                    "lsb": 1,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Brown Out Detector Threshold Voltage Selection (initiated & write-protected bit)\nThe default value is set by flash controller user configuration register config0 bit[22:21]\nBOV_VL[1]\tBOV_VL[0]\tBrown out voltage\t\n1\t1\t4.5V\t\n1\t0\t3.8V\t\n0\t1\t2.7V\t\n0\t0\t2.2V\t"
                },
                {
                    "name": "bod_en",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Brown Out Detector Enable (initiated & write-protected bit)\nThe default value is set by flash controller user configuration register config0 bit[23]\n1= Brown Out Detector function is enabled\n0= Brown Out Detector function is disabled"
                }
            ],
            "id": "gcr.bodcr",
            "name": "bodcr",
            "offset": "0x18",
            "doc": "Brown Out Detector Control Register"
        },
        "gcr.porcr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "por_dis_code",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "The register is used for the Power-On-Reset enable control. \nWhen power on, the POR circuit generates a reset signal to reset the whole chip function, but noise on the power may cause the POR active again. If set the POR_DIS_CODE equal to 0x5AA5, the POR reset function will be disabled and the POR function will re-active till the power voltage is lower to set the POR_DIS_CODE to another value or reset by chip other reset function. Include:\nPIN reset, Watch dog, LVR reset BOD reset, ICE reset command and the software-chip reset function\nThis register is the protected register, program this need an open lock sequence, write \"59h\",\"16h\",\"88h\" to address 0x5000_0100 to un-lock this bit. Reference the register REGWRPROT at address GCR_BA + 0x100"
                }
            ],
            "id": "gcr.porcr",
            "name": "porcr",
            "offset": "0x24",
            "doc": "Power-On-Reset Controller Register"
        },
        "gcr.p0_mfp": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "p0_typen",
                    "lsb": 16,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0[7:0] input Schmitt Trigger function Enable\n1= P0[7:0] I/O input Schmitt Trigger function enable\n0= P0[7:0] I/O input Schmitt Trigger function disable "
                },
                {
                    "name": "p0_alt7",
                    "lsb": 15,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0.7 alternate function Selection\nThe pin function of P0.7 is depend on P0_MFP[7] and P0_ALT[7].\nP0_ALT[7]\tP0_MFP[7]\tP0.7 function\t\n0\t0\tP0.7\t\n0\t1\tAD7(EBI)\t\n1\t0\tSPICLK1(SPI1)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p0_alt6",
                    "lsb": 14,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0.6 alternate function Selection\nThe pin function of P0.6 is depend on P0_MFP[6] and P0_ALT[6].\nP0_ALT[6]\tP0_MFP[6]\tP0.6 function\t\n0\t0\tP0.6\t\n0\t1\tAD6(EBI)\t\n1\t0\tMISO_1(SPI1)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p0_alt5",
                    "lsb": 13,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0.5 alternate function Selection\nThe pin function of P0.5 is depend on P0_MFP[5] and P0_ALT[5].\nP0_ALT[5]\tP0_MFP[5]\tP0.5 function\t\n0\t0\tP0.5\t\n0\t1\tAD5(EBI)\t\n1\t0\tMOSI_1(SPI1)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p0_alt4",
                    "lsb": 12,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0.4 alternate function Selection\nThe pin function of P0.4 is depend on P0_MFP[4] and P0_ALT[4].\nP0_ALT[4]\tP0_MFP[4]\tP0.4function\t\n0\t0\tP0.4\t\n0\t1\tAD4(EBI)\t\n1\t0\tSPISS1(SPI1)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p0_alt3",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0.3 alternate function Selection\nThe pin function of P0.3 is depend on P0_MFP[3] and P0_ALT[3].\nP0_ALT[3]\tP0_MFP[3]\tP0.3function\t\n0\t0\tP0.3\t\n0\t1\tAD3(EBI)\t\n1\t0\tRTS0(UART0)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p0_alt2",
                    "lsb": 10,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0.2 alternate function Selection\nThe pin function of P0.2 is depend on P0_MFP[2] and P0_ALT[2].\nP0_ALT[2]\tP0_MFP[2]\tP0.2function\t\n0\t0\tP0.2\t\n0\t1\tAD2(EBI)\t\n1\t0\tCTS0(UART0)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p0_alt1",
                    "lsb": 9,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0.1 alternate function Selection\nThe pin function of P0.1 is depend on P0_MFP[1] and P0_ALT[1].\nP0_ALT[1]\tP0_MFP[1]\tP0.1function\t\n0\t0\tP0.1\t\n0\t1\tAD1(EBI)\t\n1\t0\tRTS1(UART1)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p0_alt0",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0.0 alternate function Selection\nThe pin function of P0.0 is depend on P0_MFP[0] and P0_ALT[0].\nP0_ALT[0]\tP0_MFP[0]\tP0.0function\t\n0\t0\tP0.0\t\n0\t1\tAD0(EBI)\t\n1\t0\tCTS1(UART1)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p0_mfp",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 multiple function Selection\nThe pin function of P0 is depending on P0_MFP and P0_ALT.\nRefer to P0_ALT descriptions in detail."
                }
            ],
            "id": "gcr.p0_mfp",
            "name": "p0_mfp",
            "offset": "0x30",
            "doc": "P0 multiple function and input type control register"
        },
        "gcr.p1_mfp": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "p1_typen",
                    "lsb": 16,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P1[7:0] input Schmitt Trigger function Enable\n1= P1[7:0] I/O input Schmitt Trigger function enable\n0= P1[7:0] I/O input Schmitt Trigger function disable "
                },
                {
                    "name": "p1_alt7",
                    "lsb": 15,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P1.7 alternate function Selection\nThe pin function of P1.7 is depend on P1_MFP[7] and P1_ALT[7].\nP1_ALT[7]\tP1_MFP[7]\tP1.7 function\t\n0\t0\tP1.7\t\n0\t1\tAIN7(ADC)\t\n1\t0\tSPICLK0(SPI0)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p1_alt6",
                    "lsb": 14,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P1.6 alternate function Selection\nThe pin function of P1.6 is depend on P1_MFP[6] and P1_ALT[6].\nP1_ALT[6]\tP1_MFP[6]\tP1.6 function\t\n0\t0\tP1.6\t\n0\t1\tAIN6(ADC)\t\n1\t0\tMISO_0(SPI0)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p1_alt5",
                    "lsb": 13,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P1.5 alternate function Selection\nThe pin function of P1.5 is depend on P1_MFP[5] and P1_ALT[5].\nP1_ALT[5]\tP1_MFP[5]\tP1.5 function\t\n0\t0\tP1.5\t\n0\t1\tAIN5(ADC)\t\n1\t0\tMOSI_0(SPI0)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p1_alt4",
                    "lsb": 12,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P1.4 alternate function Selection\nThe pin function of P1.4 is depend on P1_MFP[4] and P1_ALT[4].\nP1_ALT[4]\tP1_MFP[4]\tP1.4function\t\n0\t0\tP1.4\t\n0\t1\tAIN4(ADC)\t\n1\t0\tSPISS0(SPI0)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p1_alt3",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P1.3 alternate function Selection\nThe pin function of P1.3 is depend on P1_MFP[3] and P1_ALT[3].\nP1_ALT[3]\tP1_MFP[3]\tP1.3function\t\n0\t0\tP1.3\t\n0\t1\tAIN3(ADC)\t\n1\t0\tTXD1(UART1)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p1_alt2",
                    "lsb": 10,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P1.2 alternate function Selection\nThe pin function of P1.2 is depend on P1_MFP[2] and P1_ALT[2].\nP1_ALT[2]\tP1_MFP[2]\tP1.2function\t\n0\t0\tP1.2\t\n0\t1\tAIN2(ADC)\t\n1\t0\tRXD1(UART1)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p1_alt1",
                    "lsb": 9,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P1.1 alternate function Selection\nThe pin function of P1.1 is depend on P1_MFP[1] and P1_ALT[1].\nP1_ALT[1]\tP1_MFP[1]\tP1.1function\t\n0\t0\tP1.1\t\n0\t1\tAIN1(ADC)\t\n1\t0\tT3(Timer3)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p1_alt0",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P1.0 alternate function Selection\nThe pin function of P1.0 is depend on P1_MFP[0] and P1_ALT[0].\nP1_ALT[0]\tP1_MFP[0]\tP1.0function\t\n0\t0\tP1.0\t\n0\t1\tAIN0(ADC)\t\n1\t0\tT2(Timer2)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p1_mfp",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P1 multiple function Selection\nThe pin function of P1 is depending on P1_MFP and P1_ALT.\nRefer to P1_ALT descriptions in detail."
                }
            ],
            "id": "gcr.p1_mfp",
            "name": "p1_mfp",
            "offset": "0x34",
            "doc": "P1 multiple function and input type control register"
        },
        "gcr.p2_mfp": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "p2_typen",
                    "lsb": 16,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P2[7:0] input Schmitt Trigger function Enable\n1= P2[7:0] I/O input Schmitt Trigger function enable\n0= P2[7:0] I/O input Schmitt Trigger function disable "
                },
                {
                    "name": "p2_alt7",
                    "lsb": 15,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P2.7 alternate function Selection\nThe pin function of P2.7 is depend on P2_MFP[7] and P2_ALT[7].\nP2_ALT[7]\tP2_MFP[7]\tP2.7 function\t\n0\t0\tP2.7\t\n0\t1\tAD15(EBI)\t\n1\t0\tPWM7(PWM generator 6)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p2_alt6",
                    "lsb": 14,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P2.6 alternate function Selection\nThe pin function of P2.6 is depend on P2_MFP[6] and P2_ALT[6].\nP2_ALT[6]\tP2_MFP[6]\tP2.6 function\t\n0\t0\tP2.6\t\n0\t1\tAD14(EBI)\t\n1\t0\tPWM6(PWM generator 6)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p2_alt5",
                    "lsb": 13,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P2.5 alternate function Selection\nThe pin function of P2.5 is depend on P2_MFP[5] and P2_ALT[5].\nP2_ALT[5]\tP2_MFP[5]\tP2.5 function\t\n0\t0\tP2.5\t\n0\t1\tAD13(EBI)\t\n1\t0\tPWM5(PWM generator 4)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p2_alt4",
                    "lsb": 12,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P2.4 alternate function Selection\nThe pin function of P2.4 is depend on P2_MFP[4] and P2_ALT[4].\nP2_ALT[4]\tP2_MFP[4]\tP0.4function\t\n0\t0\tP0.4\t\n0\t1\tAD12(EBI)\t\n1\t0\tPWM4(PWM generator 4)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p2_alt3",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P2.3 alternate function Selection\nThe pin function of P2.3 is depend on P2_MFP[3] and P2_ALT[3].\nP2_ALT[3]\tP2_MFP[3]\tP2.3function\t\n0\t0\tP2.3\t\n0\t1\tAD11(EBI)\t\n1\t0\tPWM3(PWM generator 2)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p2_alt2",
                    "lsb": 10,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P2.2 alternate function Selection\nThe pin function of P2.2 is depend on P2_MFP[2] and P2_ALT[2].\nP2_ALT[2]\tP2_MFP[2]\tP2.2function\t\n0\t0\tP2.2\t\n0\t1\tAD10(EBI)\t\n1\t0\tPWM2(PWM generator 2)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p2_alt1",
                    "lsb": 9,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P2.1 alternate function Selection\nThe pin function of P2.1 is depend on P2_MFP[1] and P2_ALT[1].\nP2_ALT[1]\tP2_MFP[1]\tP2.1function\t\n0\t0\tP2.1\t\n0\t1\tAD9(EBI)\t\n1\t0\tPWM1(PWM generator 0)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p2_alt0",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P2.0 alternate function Selection\nThe pin function of P2.0 is depend on P2_MFP[0] and P2_ALT[0].\nP2_ALT[0]\tP2_MFP[0]\tP2.0function\t\n0\t0\tP2.0\t\n0\t1\tAD8(EBI)\t\n1\t0\tPWM0(PWM generator 0)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p2_mfp",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P2 multiple function Selection\nThe pin function of P2 is depending on P2_MFP and P2_ALT.\nRefer to P2_ALT descriptions in detail."
                }
            ],
            "id": "gcr.p2_mfp",
            "name": "p2_mfp",
            "offset": "0x38",
            "doc": "P2 multiple function and input type control register"
        },
        "gcr.p3_mfp": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "p3_typen",
                    "lsb": 16,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P3[7:0] input Schmitt Trigger function Enable\n1= P3[7:0] I/O input Schmitt Trigger function enable\n0= P3[7:0] I/O input Schmitt Trigger function disable "
                },
                {
                    "name": "p3_alt7",
                    "lsb": 15,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P3.7 alternate function Selection\nThe pin function of P3.7 is depend on P3_MFP[7] and P3_ALT[7].\nP3_ALT[7]\tP3_MFP[7]\tP3.7 function\t\n0\t0\tP3.7\t\n0\t1\tRD(EBI)\t\n1\tx\tReserved\t"
                },
                {
                    "name": "p3_alt6",
                    "lsb": 14,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P3.6 alternate function Selection\nThe pin function of P3.6 is depend on P3_MFP[6] and P3_ALT[6].\nP3_ALT[6]\tP3_MFP[6]\tP3.6 function\t\n0\t0\tP3.6\t\n0\t1\tWR(EBI)\t\n1\t0\tCKO(Clock Driver output)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p3_alt5",
                    "lsb": 13,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P3.5 alternate function Selection\nThe pin function of P3.5 is depend on P3_MFP[5] and P3_ALT[5].\nP3_ALT[5]\tP3_MFP[5]\tP3.5 function\t\n0\t0\tP3.5\t\n0\t1\tT1(Timer1)\t\n1\t0\tSCL(I2C)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p3_alt4",
                    "lsb": 12,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P3.4 alternate function Selection\nThe pin function of P3.4 is depend on P3_MFP[4] and P3_ALT[4].\nP3_ALT[4]\tP3_MFP[4]\tP3.4function\t\n0\t0\tP3.4\t\n0\t1\tT0(Timer0)\t\n1\t0\tSDA(I2C)\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p3_alt3",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P3.3 alternate function Selection\nThe pin function of P3.3 is depend on P3_MFP[3] and P3_ALT[3].\nP3_ALT[3]\tP3_MFP[3]\tP3.3function\t\n0\t0\tP3.3\t\n0\t1\t/INT1\t\n1\t0\tMCLK(EBI)\t\n1\tx\tReserved\t"
                },
                {
                    "name": "p3_alt2",
                    "lsb": 10,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P3.2 alternate function Selection\nThe pin function of P3.2 is depend on P3_MFP[2] and P3_ALT[2].\nP3_ALT[2]\tP3_MFP[2]\tP3.2function\t\n0\t0\tP3.2\t\n0\t1\t/INT0\t\n1\t1\tReserved\t"
                },
                {
                    "name": "p3_alt1",
                    "lsb": 9,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P3.1 alternate function Selection\nThe pin function of P3.1 is depend on P3_MFP[1] and P3_ALT[1].\nP3_ALT[1]\tP3_MFP[1]\tP3.1function\t\n0\t0\tP3.1\t\n0\t1\tTXD(UART0)\t\n1\tx\tReserved\t"
                },
                {
                    "name": "p3_alt0",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P3.0 alternate function Selection\nThe pin function of P3.0 is depend on P3_MFP[0] and P3_ALT[0].\nP3_ALT[0]\tP3_MFP[0]\tP3.0function\t\n0\t0\tP3.0\t\n0\t1\tRXD(UART0)\t\n1\tx\tReserved\t"
                },
                {
                    "name": "p3_mfp",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P3 multiple function Selection\nThe pin function of P3 is depending on P3_MFP and P3_ALT.\nRefer to P3_ALT descriptions in detail."
                }
            ],
            "id": "gcr.p3_mfp",
            "name": "p3_mfp",
            "offset": "0x3c",
            "doc": "P3 multiple function and input type control register"
        },
        "gcr.p4_mfp": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "p4_typen",
                    "lsb": 16,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P4[7:0] input Schmitt Trigger function Enable\n1= P4[7:0] I/O input Schmitt Trigger function enable\n0= P4[7:0] I/O input Schmitt Trigger function disable "
                },
                {
                    "name": "p4_alt7",
                    "lsb": 15,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P4.7 alternate function Selection\nThe pin function of P4.7 is depend on P4_MFP[7] and P4_ALT[7].\nP4_ALT[7]\tP4_MFP[7]\tP4.7 function\t\n0\t0\tP4.7\t\n0\t1\tICE_DAT(ICE)\t\n1\tx\tReserved\t"
                },
                {
                    "name": "p4_alt6",
                    "lsb": 14,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P4.6 alternate function Selection\nThe pin function of P4.6 is depend on P4_MFP[6] and P4_ALT[6].\nP4_ALT[6]\tP4_MFP[6]\tP4.6 function\t\n0\t0\tP4.6\t\n0\t1\tICE_CLK(ICE)\t\n1\tx\tReserved\t"
                },
                {
                    "name": "p4_alt5",
                    "lsb": 13,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P4.5 alternate function Selection\nThe pin function of P4.5 is depend on P4_MFP[5] and P4_ALT[5].\nP4_ALT[5]\tP4_MFP[5]\tP4.5 function\t\n0\t0\tP4.5\t\n0\t1\tALE(EBI)\t\n1\tx\tReserved\t"
                },
                {
                    "name": "p4_alt4",
                    "lsb": 12,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P4.4 alternate function Selection\nThe pin function of P4.4 is depend on P4_MFP[4] and P4_ALT[4].\nP4_ALT[4]\tP4_MFP[4]\tP4.4function\t\n0\t0\tP4.4\t\n0\t1\t/CS(EBI)\t\n1\tx\tReserved\t"
                },
                {
                    "name": "p4_alt3",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P4.3 alternate function Selection\nThe pin function of P4.3 is depend on P4_MFP[3] and P4_ALT[3].\nP4_ALT[3]\tP4_MFP[3]\tP4.3function\t\n0\t0\tP4.3\t\n0\t1\tPWM3(PWM generator 2)\t\n1\tx\tReserved\t"
                },
                {
                    "name": "p4_alt2",
                    "lsb": 10,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P4.2 alternate function Selection\nThe pin function of P4.2 is depend on P4_MFP[2] and P4_ALT[2].\nP4_ALT[2]\tP4_MFP[2]\tP4.2function\t\n0\t0\tP4.2\t\n0\t1\tPWM2(PWM generator 2)\t\n1\tx\tReserved\t"
                },
                {
                    "name": "p4_alt1",
                    "lsb": 9,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P4.1 alternate function Selection\nThe pin function of P4.1 is depend on P4_MFP[1] and P4_ALT[1].\nP4_ALT[1]\tP4_MFP[1]\tP4.1function\t\n0\t0\tP4.1\t\n0\t1\tPWM1(PWM generator 0)\t\n1\tx\tReserved\t"
                },
                {
                    "name": "p4_alt0",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P4.0 alternate function Selection\nThe pin function of P4.0 is depend on P4_MFP[0] and P4_ALT[0].\nP4_ALT[0]\tP4_MFP[0]\tP4.0function\t\n0\t0\tP4.0\t\n0\t1\tPWM0(PWM generator 0)\t\n1\tx\tReserved\t"
                },
                {
                    "name": "p4_mfp",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "192",
                    "doc": "P4 multiple function Selection\nThe pin function of P4 is depending on P4_MFP and P4_ALT.\nRefer to P4_ALT descriptions in detail."
                }
            ],
            "id": "gcr.p4_mfp",
            "name": "p4_mfp",
            "offset": "0x40",
            "doc": "P4 input type control register"
        },
        "gcr.regwrprot": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 9,
                    "nbits": 23,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "regprotdis",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Register Write-Protected Disable index (Read only)\n1 = Protection is disabled for writing protected registers\n0 = Protection is enabled for writing protected registers. Any write to the protected register is ignored.\nThe Write-Protected registers list are below table:\nRegisters\tAddress\tNote\t\nIPRSTC1\t0x5000_0008\tNone\t\nBODCR\t0x5000_0018\tNone\t\nPORCR\t0x5000_001C\tNone\t\nPWRCON\t0x5000_0200\tbit[6] is not protected for power wake-up interrupt clear\t\nAPBCLK bit[0]\t0x5000_0208\tbit[0] is watch dog clock enable\t\nCLKSEL0\t0x5000_0210\tHCLK and CPU STCLK clock source select\t\nCLK_SEL1 bit[1:0]\t0x5000_0214\tWatch dog clock source select\t\nISPCON\t0x5000_C000\tFlash ISP Control register\t\nWTCR\t0x4000_4000\tNone\t\nFATCON\t0x5000_C018\tNone\t"
                },
                {
                    "name": "regwrprot",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "write-only",
                    "reset": "0",
                    "doc": "Register Write-Protected Code (Write Only)\nSome write-protected registers have to be disabled the protected function by writing the sequence value \"59h\", \"16h\", \"88h\" to this field. After this sequence is completed, the REGPROTDIS bit will be set to 1 and write-protected registers can be normal write."
                }
            ],
            "id": "gcr.regwrprot",
            "name": "regwrprot",
            "offset": "0x100",
            "doc": "Register Lock Key address"
        },
        "gp0": {
            "type": "blk",
            "children": [
                "gp0.pmd",
                "gp0.offd",
                "gp0.dout",
                "gp0.dmask",
                "gp0.pin",
                "gp0.dben",
                "gp0.imd",
                "gp0.ien",
                "gp0.isrc"
            ],
            "id": "gp0",
            "name": "gp0",
            "offset": "0x50004000",
            "doc": "Registers group"
        },
        "gp0.pmd": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pmd7",
                    "lsb": 14,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "P0 I/O Pin[7] Mode Control\nDetermine each I/O type of P0 pins\n00 = P0[7] pin is in INPUT mode.\n01 = P0[7] pin is in OUTPUT mode.\n10 = P0[7] pin is in Open-Drain mode.\n11 = P0[7] pin is in Quasi-bidirectional mode."
                },
                {
                    "name": "pmd6",
                    "lsb": 12,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "P0 I/O Pin[6] Mode Control\nDetermine each I/O type of P0 pins\n00 = P0[6] pin is in INPUT mode.\n01 = P0[6] pin is in OUTPUT mode.\n10 = P0[6] pin is in Open-Drain mode.\n11 = P0[6] pin is in Quasi-bidirectional mode."
                },
                {
                    "name": "pmd5",
                    "lsb": 10,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "P0 I/O Pin[5] Mode Control\nDetermine each I/O type of P0 pins\n00 = P0[5] pin is in INPUT mode.\n01 = P0[5] pin is in OUTPUT mode.\n10 = P0[5] pin is in Open-Drain mode.\n11 = P0[5] pin is in Quasi-bidirectional mode."
                },
                {
                    "name": "pmd4",
                    "lsb": 8,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "P0 I/O Pin[4] Mode Control\nDetermine each I/O type of P0 pins\n00 = P0[4] pin is in INPUT mode.\n01 = P0[4] pin is in OUTPUT mode.\n10 = P0[4] pin is in Open-Drain mode.\n11 = P0[4] pin is in Quasi-bidirectional mode."
                },
                {
                    "name": "pmd3",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "P0 I/O Pin[3] Mode Control\nDetermine each I/O type of P0 pins\n00 = P0[3] pin is in INPUT mode.\n01 = P0[3] pin is in OUTPUT mode.\n10 = P0[3] pin is in Open-Drain mode.\n11 = P0[3] pin is in Quasi-bidirectional mode."
                },
                {
                    "name": "pmd2",
                    "lsb": 4,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "P0 I/O Pin[2] Mode Control\nDetermine each I/O type of P0 pins\n00 = P0[2] pin is in INPUT mode.\n01 = P0[2] pin is in OUTPUT mode.\n10 = P0[2] pin is in Open-Drain mode.\n11 = P0[2] pin is in Quasi-bidirectional mode."
                },
                {
                    "name": "pmd1",
                    "lsb": 2,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "P0 I/O Pin[1] Mode Control\nDetermine each I/O type of P0 pins\n00 = P0[1] pin is in INPUT mode.\n01 = P0[1] pin is in OUTPUT mode.\n10 = P0[1] pin is in Open-Drain mode.\n11 = P0[1] pin is in Quasi-bidirectional mode."
                },
                {
                    "name": "pmd0",
                    "lsb": 0,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "3",
                    "doc": "P0 I/O Pin[0] Mode Control\nDetermine each I/O type of P0 pins\n00 = P0[0] pin is in INPUT mode.\n01 = P0[0] pin is in OUTPUT mode.\n10 = P0[0] pin is in Open-Drain mode.\n11 = P0[0] pin is in Quasi-bidirectional mode."
                }
            ],
            "id": "gp0.pmd",
            "name": "pmd",
            "offset": "0x0",
            "doc": "Bit Mode Control"
        },
        "gp0.offd": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "offd",
                    "lsb": 16,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "OFFD: P0 Pin OFF digital input path Enable\n1 = Disable IO digital input path (digital input tied to low)\n0 = Enable IO digital input path"
                },
                {
                    "name": "rsvd0",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "gp0.offd",
            "name": "offd",
            "offset": "0x4",
            "doc": "Bit OFF Digital Enable"
        },
        "gp0.dout": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dout7",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0 Pin[7] Output Value\nEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.\n1 = P0 Pin[7] will drive High if the corresponding output mode enabling bit is set.\n0 = P0 Pin[7] will drive Low if the corresponding output mode enabling bit is set."
                },
                {
                    "name": "dout6",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0 Pin[6] Output Value\nEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.\n1 = P0 Pin[6] will drive High if the corresponding output mode enabling bit is set.\n0 = P0 Pin[6] will drive Low if the corresponding output mode enabling bit is set."
                },
                {
                    "name": "dout5",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0 Pin[5] Output Value\nEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.\n1 = P0 Pin[5] will drive High if the corresponding output mode enabling bit is set.\n0 = P0 Pin[5] will drive Low if the corresponding output mode enabling bit is set."
                },
                {
                    "name": "dout4",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0 Pin[4] Output Value\nEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.\n1 = P0 Pin[4] will drive High if the corresponding output mode enabling bit is set.\n0 = P0 Pin[4] will drive Low if the corresponding output mode enabling bit is set."
                },
                {
                    "name": "dout3",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0 Pin[3] Output Value\nEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.\n1 = P0 Pin[3] will drive High if the corresponding output mode enabling bit is set.\n0 = P0 Pin[3] will drive Low if the corresponding output mode enabling bit is set."
                },
                {
                    "name": "dout2",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0 Pin[2] Output Value\nEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.\n1 = P0 Pin[2] will drive High if the corresponding output mode enabling bit is set.\n0 = P0 Pin[2] will drive Low if the corresponding output mode enabling bit is set."
                },
                {
                    "name": "dout1",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0 Pin[1] Output Value\nEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.\n1 = P0 Pin[1] will drive High if the corresponding output mode enabling bit is set.\n0 = P0 Pin[1] will drive Low if the corresponding output mode enabling bit is set."
                },
                {
                    "name": "dout0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0 Pin[0] Output Value\nEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.\n1 = P0 Pin[0] will drive High if the corresponding output mode enabling bit is set.\n0 = P0 Pin[0] will drive Low if the corresponding output mode enabling bit is set."
                }
            ],
            "id": "gp0.dout",
            "name": "dout",
            "offset": "0x8",
            "doc": "Data Output Value"
        },
        "gp0.dmask": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dmask7",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Data Output Write Mask\nThese bits are used to protect the corresponding register of P0_DOUT bit[7]. When set the DMASK bit[7] to \"1\", the corresponding DOUT7 bit is protected. The write signal is masked, write data to the protect bit is ignored\n0 = The corresponding P0_DOUT[7] bit can be updated\n1 = The corresponding P0_DOUT[7] bit is protected"
                },
                {
                    "name": "dmask6",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Data Output Write Mask\nThese bits are used to protect the corresponding register of P0_DOUT bit[6]. When set the DMASK bit[6] to \"1\", the corresponding DOUT6 bit is protected. The write signal is masked, write data to the protect bit is ignored\n0 = The corresponding P0_DOUT[6] bit can be updated\n1 = The corresponding P0_DOUT[6] bit is protected"
                },
                {
                    "name": "dmask5",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Data Output Write Mask\nThese bits are used to protect the corresponding register of P0_DOUT bit[6]. When set the DMASK bit[6] to \"1\", the corresponding DOUT6 bit is protected. The write signal is masked, write data to the protect bit is ignored\n0 = The corresponding P0_DOUT[6] bit can be updated\n1 = The corresponding P0_DOUT[6] bit is protected"
                },
                {
                    "name": "dmask4",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Data Output Write Mask\nThese bits are used to protect the corresponding register of P0_DOUT bit[4]. When set the DMASK bit[4] to \"1\", the corresponding DOUT4 bit is protected. The write signal is masked, write data to the protect bit is ignored\n0 = The corresponding P0_DOUT[4] bit can be updated\n1 = The corresponding P0_DOUT[4] bit is protected"
                },
                {
                    "name": "dmask3",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Data Output Write Mask\nThese bits are used to protect the corresponding register of P0_DOUT bit[3]. When set the DMASK bit[3] to \"1\", the corresponding DOUT3 bit is protected. The write signal is masked, write data to the protect bit is ignored\n0 = The corresponding P0_DOUT[3] bit can be updated\n1 = The corresponding P0_DOUT[3] bit is protected"
                },
                {
                    "name": "dmask2",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Data Output Write Mask\nThese bits are used to protect the corresponding register of P0_DOUT bit[2]. When set the DMASK bit[2] to \"1\", the corresponding DOUT2 bit is protected. The write signal is masked, write data to the protect bit is ignored\n0 = The corresponding P0_DOUT[2] bit can be updated\n1 = The corresponding P0_DOUT[2] bit is protected"
                },
                {
                    "name": "dmask1",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Data Output Write Mask\nThese bits are used to protect the corresponding register of P0_DOUT bit[1]. When set the DMASK bit[1] to \"1\", the corresponding DOUT1 bit is protected. The write signal is masked, write data to the protect bit is ignored\n0 = The corresponding P0_DOUT[1] bit can be updated\n1 = The corresponding P0_DOUT[1] bit is protected"
                },
                {
                    "name": "dmask0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Data Output Write Mask\nThese bits are used to protect the corresponding register of P0_DOUT bit[0]. When set the DMASK bit[0] to \"1\", the corresponding DOUT0 bit is protected. The write signal is masked, write data to the protect bit is ignored\n0 = The corresponding P0_DOUT[0] bit can be updated\n1 = The corresponding P0_DOUT[0] bit is protected"
                }
            ],
            "id": "gp0.dmask",
            "name": "dmask",
            "offset": "0xc",
            "doc": "Data Output Write Mask"
        },
        "gp0.pin": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pin7",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "P0 Pin Values\nThe value read from each of these bit reflects the actual status of the respective P0 Pin[7]."
                },
                {
                    "name": "pin6",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "P0 Pin Values\nThe value read from each of these bit reflects the actual status of the respective P0 Pin[6]."
                },
                {
                    "name": "pin5",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "P0 Pin Values\nThe value read from each of these bit reflects the actual status of the respective P0 Pin[5]."
                },
                {
                    "name": "pin4",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "P0 Pin Values\nThe value read from each of these bit reflects the actual status of the respective P0 Pin[4]."
                },
                {
                    "name": "pin3",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "P0 Pin Values\nThe value read from each of these bit reflects the actual status of the respective P0 Pin[3]."
                },
                {
                    "name": "pin2",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "P0 Pin Values\nThe value read from each of these bit reflects the actual status of the respective P0 Pin[2]."
                },
                {
                    "name": "pin1",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "P0 Pin Values\nThe value read from each of these bit reflects the actual status of the respective P0 Pin[1]."
                },
                {
                    "name": "pin0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "P0 Pin Values\nThe value read from each of these bit reflects the actual status of the respective P0 Pin[0]."
                }
            ],
            "id": "gp0.pin",
            "name": "pin",
            "offset": "0x10",
            "doc": "Pin Value"
        },
        "gp0.dben": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dben7",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Input Signal De-bounce Enable\nDBEN[7] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.\nThe DBEN[7] is used for \"edge-trigger\" interrupt only, and ignored for \"level trigger\" interrupt\n0 = The bit[7] de-bounce function is disabled\n1 = The bit[7] de-bounce function is enabled\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "dben6",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Input Signal De-bounce Enable\nDBEN[6] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.\nThe DBEN[6] is used for \"edge-trigger\" interrupt only, and ignored for \"level trigger\" interrupt\n0 = The bit[6] de-bounce function is disabled\n1 = The bit[6] de-bounce function is enabled\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "dben5",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Input Signal De-bounce Enable\nDBEN[5] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.\nThe DBEN[5] is used for \"edge-trigger\" interrupt only, and ignored for \"level trigger\" interrupt\n0 = The bit[5] de-bounce function is disabled\n1 = The bit[5] de-bounce function is enabled\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "dben4",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Input Signal De-bounce Enable\nDBEN[4] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.\nThe DBEN[4] is used for \"edge-trigger\" interrupt only, and ignored for \"level trigger\" interrupt\n0 = The bit[4] de-bounce function is disabled\n1 = The bit[4] de-bounce function is enabled\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "dben3",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Input Signal De-bounce Enable\nDBEN[3] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.\nThe DBEN[3] is used for \"edge-trigger\" interrupt only, and ignored for \"level trigger\" interrupt\n0 = The bit[3] de-bounce function is disabled\n1 = The bit[3] de-bounce function is enabled\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "dben2",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Input Signal De-bounce Enable\nDBEN[2] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.\nThe DBEN[2] is used for \"edge-trigger\" interrupt only, and ignored for \"level trigger\" interrupt\n0 = The bit[2] de-bounce function is disabled\n1 = The bit[2] de-bounce function is enabled\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "dben1",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Input Signal De-bounce Enable\nDBEN[1] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.\nThe DBEN[1] is used for \"edge-trigger\" interrupt only, and ignored for \"level trigger\" interrupt\n0 = The bit[1] de-bounce function is disabled\n1 = The bit[1] de-bounce function is enabled\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "dben0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "P0 Input Signal De-bounce Enable\nDBEN[0] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.\nThe DBEN[0] is used for \"edge-trigger\" interrupt only, and ignored for \"level trigger\" interrupt\n0 = The bit[0] de-bounce function is disabled\n1 = The bit[0] de-bounce function is enabled\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                }
            ],
            "id": "gp0.dben",
            "name": "dben",
            "offset": "0x14",
            "doc": "De-bounce Enable"
        },
        "gp0.imd": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "imd7",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Mode Control\nIMD[7] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt\n0 = Edge trigger interrupt\n1 = Level trigger interrupt\nif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.\nif set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "imd6",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Mode Control\nIMD[6] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt\n0 = Edge trigger interrupt\n1 = Level trigger interrupt\nif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.\nif set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "imd5",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Mode Control\nIMD[5] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt\n0 = Edge trigger interrupt\n1 = Level trigger interrupt\nif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.\nif set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "imd4",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Mode Control\nIMD[4] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt\n0 = Edge trigger interrupt\n1 = Level trigger interrupt\nif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.\nif set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "imd3",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Mode Control\nIMD[3] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt\n0 = Edge trigger interrupt\n1 = Level trigger interrupt\nif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.\nif set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "imd2",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Mode Control\nIMD[2] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt\n0 = Edge trigger interrupt\n1 = Level trigger interrupt\nif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.\nif set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "imd1",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Mode Control\nIMD[1] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt\n0 = Edge trigger interrupt\n1 = Level trigger interrupt\nif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.\nif set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                },
                {
                    "name": "imd0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Mode Control\nIMD[0] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt\n0 = Edge trigger interrupt\n1 = Level trigger interrupt\nif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.\nif set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.\nThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored."
                }
            ],
            "id": "gp0.imd",
            "name": "imd",
            "offset": "0x18",
            "doc": "Interrupt Mode Control"
        },
        "gp0.ien": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ir_en7",
                    "lsb": 23,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Enable by Input Rising Edge or Input Level High\nIR_EN[7] used to enable the interrupt for each of the corresponding input P0[7]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IR_EN[7] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[7] state at level \"high\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[7] state change from \"low-to-high\" will generate the interrupt.\n1 = Enable the P0[7] level-high or low-to-high interrupt\n0 = Disable the P0[7] level-high or low-to-high interrupt"
                },
                {
                    "name": "ir_en6",
                    "lsb": 22,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Enable by Input Rising Edge or Input Level High\nIR_EN[6] used to enable the interrupt for each of the corresponding input P0[6]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IR_EN[6] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[6] state at level \"high\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[6] state change from \"low-to-high\" will generate the interrupt.\n1 = Enable the P0[6] level-high or low-to-high interrupt\n0 = Disable the P0[6] level-high or low-to-high interrupt"
                },
                {
                    "name": "ir_en5",
                    "lsb": 21,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Enable by Input Rising Edge or Input Level High\nIR_EN[5] used to enable the interrupt for each of the corresponding input P0[5]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IR_EN[5] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[5] state at level \"high\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[5] state change from \"low-to-high\" will generate the interrupt.\n1 = Enable the P0[5] level-high or low-to-high interrupt\n0 = Disable the P0[5] level-high or low-to-high interrupt"
                },
                {
                    "name": "ir_en4",
                    "lsb": 20,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Enable by Input Rising Edge or Input Level High\nIR_EN[4] used to enable the interrupt for each of the corresponding input P0[4]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IR_EN[4] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[4] state at level \"high\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[4] state change from \"low-to-high\" will generate the interrupt.\n1 = Enable the P0[4] level-high or low-to-high interrupt\n0 = Disable the P0[4] level-high or low-to-high interrupt"
                },
                {
                    "name": "ir_en3",
                    "lsb": 19,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Enable by Input Rising Edge or Input Level High\nIR_EN[3] used to enable the interrupt for each of the corresponding input P0[3]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IR_EN[3] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[3] state at level \"high\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[3] state change from \"low-to-high\" will generate the interrupt.\n1 = Enable the P0[3] level-high or low-to-high interrupt\n0 = Disable the P0[3] level-high or low-to-high interrupt"
                },
                {
                    "name": "ir_en2",
                    "lsb": 18,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Enable by Input Rising Edge or Input Level High\nIR_EN[2] used to enable the interrupt for each of the corresponding input P0[2]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IR_EN[2] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[2] state at level \"high\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[2] state change from \"low-to-high\" will generate the interrupt.\n1 = Enable the P0[2] level-high or low-to-high interrupt\n0 = Disable the P0[2] level-high or low-to-high interrupt"
                },
                {
                    "name": "ir_en1",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Enable by Input Rising Edge or Input Level High\nIR_EN[1] used to enable the interrupt for each of the corresponding input P0[1]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IR_EN[1] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[1] state at level \"high\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[1] state change from \"low-to-high\" will generate the interrupt.\n1 = Enable the P0[1] level-high or low-to-high interrupt\n0 = Disable the P0[1] level-high or low-to-high interrupt"
                },
                {
                    "name": "ir_en0",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Enable by Input Rising Edge or Input Level High\nIR_EN[0] used to enable the interrupt for each of the corresponding input P0[0]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IR_EN[0] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[0] state at level \"high\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[0] state change from \"low-to-high\" will generate the interrupt.\n1 = Enable the P0[0] level-high or low-to-high interrupt\n0 = Disable the P0[0] level-high or low-to-high interrupt"
                },
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "if_en7",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port0 Interrupt Enable by Input Falling Edge or Input Level Low\nIF_EN[7] used to enable the interrupt for each of the corresponding input P0[7]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IF_EN[7] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[7] state at level \"low\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[7] state change from \"high-to-low\" will generate the interrupt.\n1 = Enable the P0[7] state low-level or high-to-low change interrupt\n0 = Disable the P0[7] state low-level or high-to-low change interrupt"
                },
                {
                    "name": "if_en6",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port0 Interrupt Enable by Input Falling Edge or Input Level Low\nIF_EN[6] used to enable the interrupt for each of the corresponding input P0[6]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IF_EN[6] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[6] state at level \"low\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[6] state change from \"high-to-low\" will generate the interrupt.\n1 = Enable the P0[6] state low-level or high-to-low change interrupt\n0 = Disable the P0[6] state low-level or high-to-low change interrupt"
                },
                {
                    "name": "if_en5",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port0 Interrupt Enable by Input Falling Edge or Input Level Low\nIF_EN[5] used to enable the interrupt for each of the corresponding input P0[5]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IF_EN[5] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[5] state at level \"low\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[5] state change from \"high-to-low\" will generate the interrupt.\n1 = Enable the P0[5] state low-level or high-to-low change interrupt\n0 = Disable the P0[5] state low-level or high-to-low change interrupt"
                },
                {
                    "name": "if_en4",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port0 Interrupt Enable by Input Falling Edge or Input Level Low\nIF_EN[4] used to enable the interrupt for each of the corresponding input P0[4]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IF_EN[4] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[4] state at level \"low\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[4] state change from \"high-to-low\" will generate the interrupt.\n1 = Enable the P0[4] state low-level or high-to-low change interrupt\n0 = Disable the P0[4] state low-level or high-to-low change interrupt"
                },
                {
                    "name": "if_en3",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port0 Interrupt Enable by Input Falling Edge or Input Level Low\nIF_EN[3] used to enable the interrupt for each of the corresponding input P0[3]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IF_EN[3] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[3] state at level \"low\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[3] state change from \"high-to-low\" will generate the interrupt.\n1 = Enable the P0[3] state low-level or high-to-low change interrupt\n0 = Disable the P0[3] state low-level or high-to-low change interrupt"
                },
                {
                    "name": "if_en2",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port0 Interrupt Enable by Input Falling Edge or Input Level Low\nIF_EN[2] used to enable the interrupt for each of the corresponding input P0[2]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IF_EN[2] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[2] state at level \"low\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[2] state change from \"high-to-low\" will generate the interrupt.\n1 = Enable the P0[2] state low-level or high-to-low change interrupt\n0 = Disable the P0[2] state low-level or high-to-low change interrupt"
                },
                {
                    "name": "if_en1",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port0 Interrupt Enable by Input Falling Edge or Input Level Low\nIF_EN[1] used to enable the interrupt for each of the corresponding input P0[1]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IF_EN[1] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[1] state at level \"low\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[1] state change from \"high-to-low\" will generate the interrupt.\n1 = Enable the P0[1] state low-level or high-to-low change interrupt\n0 = Disable the P0[1] state low-level or high-to-low change interrupt"
                },
                {
                    "name": "if_en0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port0 Interrupt Enable by Input Falling Edge or Input Level Low\nIF_EN[0] used to enable the interrupt for each of the corresponding input P0[0]. Set bit \"1\" also enable the pin wakeup function.\nWhen set the IF_EN[0] bit \"1\":\nIf the interrupt is level mode trigger, the input P0[0] state at level \"low\" will generate the interrupt.\nIf the interrupt is edge mode trigger, the input P0[0] state change from \"high-to-low\" will generate the interrupt.\n1 = Enable the P0[0] state low-level or high-to-low change interrupt\n0 = Disable the P0[0] state low-level or high-to-low change interrupt"
                }
            ],
            "id": "gp0.ien",
            "name": "ien",
            "offset": "0x1c",
            "doc": "Interrupt Enable"
        },
        "gp0.isrc": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "isrc7",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Trigger Source Indicator\nRead:\n1 = Indicates P0[7] generate an interrupt\n0 = No interrupt at P0[7]\nWrite:\n1 = Clear the correspond pending interrupt\n0 = No action"
                },
                {
                    "name": "isrc6",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Trigger Source Indicator\nRead:\n1 = Indicates P0[6] generate an interrupt\n0 = No interrupt at P0[6]\nWrite:\n1 = Clear the correspond pending interrupt\n0 = No action"
                },
                {
                    "name": "isrc5",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Trigger Source Indicator\nRead:\n1 = Indicates P0[5] generate an interrupt\n0 = No interrupt at P0[5]\nWrite:\n1 = Clear the correspond pending interrupt\n0 = No action"
                },
                {
                    "name": "isrc4",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Trigger Source Indicator\nRead:\n1 = Indicates P0[4] generate an interrupt\n0 = No interrupt at P0[4]\nWrite:\n1 = Clear the correspond pending interrupt\n0 = No action"
                },
                {
                    "name": "isrc3",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Trigger Source Indicator\nRead:\n1 = Indicates P0[3] generate an interrupt\n0 = No interrupt at P0[3]\nWrite:\n1 = Clear the correspond pending interrupt\n0 = No action"
                },
                {
                    "name": "isrc2",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Trigger Source Indicator\nRead:\n1 = Indicates P0[2] generate an interrupt\n0 = No interrupt at P0[2]\nWrite:\n1 = Clear the correspond pending interrupt\n0 = No action"
                },
                {
                    "name": "isrc1",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Trigger Source Indicator\nRead:\n1 = Indicates P0[1] generate an interrupt\n0 = No interrupt at P0[1]\nWrite:\n1 = Clear the correspond pending interrupt\n0 = No action"
                },
                {
                    "name": "isrc0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Port 0 Interrupt Trigger Source Indicator\nRead:\n1 = Indicates P0[0] generate an interrupt\n0 = No interrupt at P0[0]\nWrite:\n1 = Clear the correspond pending interrupt\n0 = No action"
                }
            ],
            "id": "gp0.isrc",
            "name": "isrc",
            "offset": "0x20",
            "doc": "Interrupt Trigger Source"
        },
        "gp1": {
            "type": "blk",
            "children": [],
            "id": "gp1",
            "name": "gp1",
            "offset": "0x50004040",
            "doc": ""
        },
        "gp2": {
            "type": "blk",
            "children": [],
            "id": "gp2",
            "name": "gp2",
            "offset": "0x50004080",
            "doc": ""
        },
        "gp3": {
            "type": "blk",
            "children": [],
            "id": "gp3",
            "name": "gp3",
            "offset": "0x500040c0",
            "doc": ""
        },
        "gp4": {
            "type": "blk",
            "children": [],
            "id": "gp4",
            "name": "gp4",
            "offset": "0x50004100",
            "doc": ""
        },
        "gpio": {
            "type": "blk",
            "children": [
                "gpio.dbncecon"
            ],
            "id": "gpio",
            "name": "gpio",
            "offset": "0x50004180",
            "doc": "Registers group"
        },
        "gpio.dbncecon": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 6,
                    "nbits": 26,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "iclk_on",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "Interrupt clock On mode\nSet this bit \"0\" will disable the interrupt generate circuit clock, if the pin[n] interrupt is disabled\n0 = disable the clock if the P0/1/2/3/4[n] interrupt is disabled\n1 = interrupt generated circuit clock always enable \nn=0~7"
                },
                {
                    "name": "dbclksrc",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "De-bounce counter clock source select\n1 = De-bounce counter clock source is the internal 10KHz clock\n0 = De-bounce counter clock source is the HCLK"
                },
                {
                    "name": "dbclksel",
                    "lsb": 0,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "De-bounce sampling cycle selection\nDBCLKSEL\tDescription\t\n0\tSample interrupt input once per 1 clocks\t\n1\tSample interrupt input once per 2 clocks\t\n2\tSample interrupt input once per 4 clocks\t\n3\tSample interrupt input once per 8 clocks\t\n4\tSample interrupt input once per 16 clocks\t\n5\tSample interrupt input once per 32 clocks\t\n6\tSample interrupt input once per 64 clocks\t\n7\tSample interrupt input once per 128 clocks\t\n8\tSample interrupt input once per 256 clocks\t\n9\tSample interrupt input once per 2*256 clocks\t\n10\tSample interrupt input once per 4*256clocks\t\n11\tSample interrupt input once per 8*256 clocks\t\n12\tSample interrupt input once per 16*256 clocks\t\n13\tSample interrupt input once per 32*256 clocks\t\n14\tSample interrupt input once per 64*256 clocks\t\n15\tSample interrupt input once per 128*256 clocks\t"
                }
            ],
            "id": "gpio.dbncecon",
            "name": "dbncecon",
            "offset": "0x0",
            "doc": "Interrupt De-bounce Cycle Control"
        },
        "gp0_bits": {
            "type": "blk",
            "children": [
                "gp0_bits.px0_dout",
                "gp0_bits.px1_dout",
                "gp0_bits.px2_dout",
                "gp0_bits.px3_dout",
                "gp0_bits.px4_dout",
                "gp0_bits.px5_dout",
                "gp0_bits.px6_dout",
                "gp0_bits.px7_dout"
            ],
            "id": "gp0_bits",
            "name": "gp0_bits",
            "offset": "0x50004200",
            "doc": "Registers group"
        },
        "gp0_bits.px0_dout": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 31,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dout",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0.0 I/O Pin Bit Output Control\nSet this bit can control one GPIO pin output value\n1 = Set corresponding GPIO bit to high\n0 = Set corresponding GPIO bit to low"
                }
            ],
            "id": "gp0_bits.px0_dout",
            "name": "px0_dout",
            "offset": "0x200",
            "doc": "Px.0 Data Output Value"
        },
        "gp0_bits.px1_dout": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 31,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dout",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0.1 I/O Pin Bit Output Control\nSet this bit can control one GPIO pin output value\n1 = Set corresponding GPIO bit to high\n0 = Set corresponding GPIO bit to low"
                }
            ],
            "id": "gp0_bits.px1_dout",
            "name": "px1_dout",
            "offset": "0x204",
            "doc": "Px.1 Data Output Value"
        },
        "gp0_bits.px2_dout": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 31,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dout",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0.2 I/O Pin Bit Output Control\nSet this bit can control one GPIO pin output value\n1 = Set corresponding GPIO bit to high\n0 = Set corresponding GPIO bit to low"
                }
            ],
            "id": "gp0_bits.px2_dout",
            "name": "px2_dout",
            "offset": "0x208",
            "doc": "Px.2 Data Output Value"
        },
        "gp0_bits.px3_dout": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 31,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dout",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0.3 I/O Pin Bit Output Control\nSet this bit can control one GPIO pin output value\n1 = Set corresponding GPIO bit to high\n0 = Set corresponding GPIO bit to low"
                }
            ],
            "id": "gp0_bits.px3_dout",
            "name": "px3_dout",
            "offset": "0x20c",
            "doc": "Px.3 Data Output Value"
        },
        "gp0_bits.px4_dout": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 31,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dout",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0.4 I/O Pin Bit Output Control\nSet this bit can control one GPIO pin output value\n1 = Set corresponding GPIO bit to high\n0 = Set corresponding GPIO bit to low"
                }
            ],
            "id": "gp0_bits.px4_dout",
            "name": "px4_dout",
            "offset": "0x210",
            "doc": "Px.4 Data Output Value"
        },
        "gp0_bits.px5_dout": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 31,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dout",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0.5 I/O Pin Bit Output Control\nSet this bit can control one GPIO pin output value\n1 = Set corresponding GPIO bit to high\n0 = Set corresponding GPIO bit to low"
                }
            ],
            "id": "gp0_bits.px5_dout",
            "name": "px5_dout",
            "offset": "0x214",
            "doc": "Px.5 Data Output Value"
        },
        "gp0_bits.px6_dout": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 31,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dout",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0.6 I/O Pin Bit Output Control\nSet this bit can control one GPIO pin output value\n1 = Set corresponding GPIO bit to high\n0 = Set corresponding GPIO bit to low"
                }
            ],
            "id": "gp0_bits.px6_dout",
            "name": "px6_dout",
            "offset": "0x218",
            "doc": "Px.6 Data Output Value"
        },
        "gp0_bits.px7_dout": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 31,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dout",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "P0.7 I/O Pin Bit Output Control\nSet this bit can control one GPIO pin output value\n1 = Set corresponding GPIO bit to high\n0 = Set corresponding GPIO bit to low"
                }
            ],
            "id": "gp0_bits.px7_dout",
            "name": "px7_dout",
            "offset": "0x21c",
            "doc": "Px.7 Data Output Value"
        },
        "gp1_bits": {
            "type": "blk",
            "children": [],
            "id": "gp1_bits",
            "name": "gp1_bits",
            "offset": "0x50004220",
            "doc": ""
        },
        "gp2_bits": {
            "type": "blk",
            "children": [],
            "id": "gp2_bits",
            "name": "gp2_bits",
            "offset": "0x50004240",
            "doc": ""
        },
        "gp3_bits": {
            "type": "blk",
            "children": [],
            "id": "gp3_bits",
            "name": "gp3_bits",
            "offset": "0x50004260",
            "doc": ""
        },
        "gp4_bits": {
            "type": "blk",
            "children": [],
            "id": "gp4_bits",
            "name": "gp4_bits",
            "offset": "0x50004280",
            "doc": ""
        },
        "i2c": {
            "type": "blk",
            "children": [
                "i2c.i2con",
                "i2c.i2caddr0",
                "i2c.i2cdat",
                "i2c.i2cstatus",
                "i2c.i2clk",
                "i2c.i2ctoc",
                "i2c.i2caddr1",
                "i2c.i2caddr2",
                "i2c.i2caddr3",
                "i2c.i2cadm0",
                "i2c.i2cadm1",
                "i2c.i2cadm2",
                "i2c.i2cadm3"
            ],
            "id": "i2c",
            "name": "i2c",
            "offset": "0x40020000",
            "doc": "Registers group"
        },
        "i2c.i2con": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ei",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Enable interrupt. \n1 = Enable I2C interrupt.\n0 = Disable I2C interrupt. "
                },
                {
                    "name": "ensi",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C controller is enabled/disable\n1 = Enable\n0 = Disable\nSet to enable I2C serial function block. When ENS=1 the I2C serial function enables. The multi-function pin function of SDA and SCL must set to I2C function first."
                },
                {
                    "name": "sta",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C START Flag. \nSetting STA to logic 1 to enter master mode, the I2C hardware sends a START or repeat START condition to bus when the bus is free."
                },
                {
                    "name": "sto",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C STOP Flag. \nIn master mode, setting STO to transmit a STOP condition to bus then I2C hardware will check the bus condition if a STOP condition is detected this flag will be cleared by hardware automatically.\nIn a slave mode, setting STO resets I2C hardware to the defined \"not addressed\" slave mode. This means it is NO LONGER in the slave receiver mode to receive data from the master transmit device."
                },
                {
                    "name": "si",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C Interrupt Flag. \nWhen a new SIO state is present in the I2CSTATUS register, the SI flag is set by hardware, and if bit EI (I2CON [7]) is set, the I2C interrupt is requested. SI must be cleared by software. Clear SI is by writing one to this bit."
                },
                {
                    "name": "aa",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Assert Acknowledge control bit. \nWhen AA=1 prior to address or data received, an acknowledged (low level to SDA) will be returned during the acknowledge clock pulse on the SCL line when 1.) A slave is acknowledging the address sent from master, 2.) The receiver devices are acknowledging the data sent by transmitter. When AA=0 prior to address or data received, a Not acknowledged (high level to SDA) will be returned during the acknowledge clock pulse on the SCL line."
                },
                {
                    "name": "rsvd0",
                    "lsb": 0,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "i2c.i2con",
            "name": "i2con",
            "offset": "0x0",
            "doc": "I2C Control Register"
        },
        "i2c.i2caddr0": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2caddr",
                    "lsb": 1,
                    "nbits": 7,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C Address Register\nThe content of this register is irrelevant when I2C is in master mode. In the slave mode, the seven most significant bits must be loaded with the MCU's own address. The I2C hardware will react if either of the address is matched."
                },
                {
                    "name": "gc",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "General Call Function\n0 = Disable General Call Function.\n1 = Enable General Call Function."
                }
            ],
            "id": "i2c.i2caddr0",
            "name": "i2caddr0",
            "offset": "0x4",
            "doc": "I2C slave Address Register0"
        },
        "i2c.i2cdat": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2cdat",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C Data Register\nBit[7:0] is located with the 8-bit transferred data of I2C serial port. "
                }
            ],
            "id": "i2c.i2cdat",
            "name": "i2cdat",
            "offset": "0x8",
            "doc": "I2C DATA Register"
        },
        "i2c.i2cstatus": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2cstatus",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "read-only",
                    "reset": "248",
                    "doc": "I2C Status Register \nThe status register of I2C:\nThe three least significant bits are always 0. The five most significant bits contain the status code. There are 26 possible status codes. When I2STATUS contains F8H, no serial interrupt is requested. All other I2STATUS values correspond to defined I2C states. When each of these states is entered, a status interrupt is requested (SI = 1). A valid status code is present in I2STATUS one machine cycle after SI is set by hardware and is still present one machine cycle after SI has been reset by software. In addition, states 00H stands for a Bus Error. A Bus Error occurs when a START or STOP condition is present at an illegal position in the formation frame. Example of illegal position are during the serial transfer of an address byte, a data byte or an acknowledge bit."
                }
            ],
            "id": "i2c.i2cstatus",
            "name": "i2cstatus",
            "offset": "0xc",
            "doc": "I2C Status Register"
        },
        "i2c.i2clk": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2clk",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C clock divided Register\nThe I2C clock rate bits: Data Baud Rate of I2C = PCLK /(4x(I2CLK+1))."
                }
            ],
            "id": "i2c.i2clk",
            "name": "i2clk",
            "offset": "0x10",
            "doc": "I2C clock divided Register"
        },
        "i2c.i2ctoc": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "enti",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Time-out counter is enabled/disable\n1 = Enable\n0 = Disable\nWhen Enable, the 14 bit time-out counter will start counting when SI is clear. Setting flag SI to high will reset counter and re-start up counting after SI is cleared."
                },
                {
                    "name": "div4",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Time-Out counter input clock is divider by 4 \n1 = Enable\n0 = Disable\nWhen Enable, The time-Out period is prolong 4 times."
                },
                {
                    "name": "tif",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Time-Out flag. \n1 = Time-Out falg is set by H/W. It can interrupt CPU.\n0 = S/W can clear the flag."
                }
            ],
            "id": "i2c.i2ctoc",
            "name": "i2ctoc",
            "offset": "0x14",
            "doc": "I2C Time out control Register"
        },
        "i2c.i2caddr1": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2caddr",
                    "lsb": 1,
                    "nbits": 7,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C Address Register\nThe content of this register is irrelevant when I2C is in master mode. In the slave mode, the seven most significant bits must be loaded with the MCU's own address. The I2C hardware will react if either of the address is matched."
                },
                {
                    "name": "gc",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "General Call Function\n0 = Disable General Call Function.\n1 = Enable General Call Function."
                }
            ],
            "id": "i2c.i2caddr1",
            "name": "i2caddr1",
            "offset": "0x18",
            "doc": "I2C slave Address Register1"
        },
        "i2c.i2caddr2": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2caddr",
                    "lsb": 1,
                    "nbits": 7,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C Address Register\nThe content of this register is irrelevant when I2C is in master mode. In the slave mode, the seven most significant bits must be loaded with the MCU's own address. The I2C hardware will react if either of the address is matched."
                },
                {
                    "name": "gc",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "General Call Function\n0 = Disable General Call Function.\n1 = Enable General Call Function."
                }
            ],
            "id": "i2c.i2caddr2",
            "name": "i2caddr2",
            "offset": "0x1c",
            "doc": "I2C slave Address Register2"
        },
        "i2c.i2caddr3": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2caddr",
                    "lsb": 1,
                    "nbits": 7,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C Address Register\nThe content of this register is irrelevant when I2C is in master mode. In the slave mode, the seven most significant bits must be loaded with the MCU's own address. The I2C hardware will react if either of the address is matched."
                },
                {
                    "name": "gc",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "General Call Function\n0 = Disable General Call Function.\n1 = Enable General Call Function."
                }
            ],
            "id": "i2c.i2caddr3",
            "name": "i2caddr3",
            "offset": "0x20",
            "doc": "I2C slave Address Register3"
        },
        "i2c.i2cadm0": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2admx",
                    "lsb": 1,
                    "nbits": 7,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C Address Mask register\n1 = Mask enable (the received corresponding address bit is don't care.)\n0 = Mask disable (the received corresponding register bit should be exact the same as address register.) \nI2C bus controllers support multiple address recognition with four address mask register. When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care. If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register."
                },
                {
                    "name": "rsvd0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "i2c.i2cadm0",
            "name": "i2cadm0",
            "offset": "0x24",
            "doc": "I2C Slave address Mask Register0"
        },
        "i2c.i2cadm1": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2admx",
                    "lsb": 1,
                    "nbits": 7,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C Address Mask register\n1 = Mask enable (the received corresponding address bit is don't care.)\n0 = Mask disable (the received corresponding register bit should be exact the same as address register.) \nI2C bus controllers support multiple address recognition with four address mask register. When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care. If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register."
                },
                {
                    "name": "rsvd0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "i2c.i2cadm1",
            "name": "i2cadm1",
            "offset": "0x28",
            "doc": "I2C Slave address Mask Register1"
        },
        "i2c.i2cadm2": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2admx",
                    "lsb": 1,
                    "nbits": 7,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C Address Mask register\n1 = Mask enable (the received corresponding address bit is don't care.)\n0 = Mask disable (the received corresponding register bit should be exact the same as address register.) \nI2C bus controllers support multiple address recognition with four address mask register. When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care. If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register."
                },
                {
                    "name": "rsvd0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "i2c.i2cadm2",
            "name": "i2cadm2",
            "offset": "0x2c",
            "doc": "I2C Slave address Mask Register2"
        },
        "i2c.i2cadm3": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "i2admx",
                    "lsb": 1,
                    "nbits": 7,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "I2C Address Mask register\n1 = Mask enable (the received corresponding address bit is don't care.)\n0 = Mask disable (the received corresponding register bit should be exact the same as address register.) \nI2C bus controllers support multiple address recognition with four address mask register. When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care. If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register."
                },
                {
                    "name": "rsvd0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "i2c.i2cadm3",
            "name": "i2cadm3",
            "offset": "0x30",
            "doc": "I2C Slave address Mask Register3"
        },
        "int": {
            "type": "blk",
            "children": [
                "int.irq0_src",
                "int.irq1_src",
                "int.irq2_src",
                "int.irq3_src",
                "int.irq4_src",
                "int.irq5_src",
                "int.irq6_src",
                "int.irq7_src",
                "int.irq8_src",
                "int.irq9_src",
                "int.irq10_src",
                "int.irq11_src",
                "int.irq12_src",
                "int.irq13_src",
                "int.irq14_src",
                "int.irq15_src",
                "int.irq18_src",
                "int.irq21_src",
                "int.irq22_src",
                "int.irq28_src",
                "int.irq29_src",
                "int.irq30_src",
                "int.nmi_sel",
                "int.mcu_irq"
            ],
            "id": "int",
            "name": "int",
            "offset": "0x50000300",
            "doc": "Registers group"
        },
        "int.irq0_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: BOD_INT"
                }
            ],
            "id": "int.irq0_src",
            "name": "irq0_src",
            "offset": "0x0",
            "doc": "MCU IRQ0 (BOD) interrupt source identify"
        },
        "int.irq1_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: WDT_INT"
                }
            ],
            "id": "int.irq1_src",
            "name": "irq1_src",
            "offset": "0x4",
            "doc": "MCU IRQ1 (WDT) interrupt source identify"
        },
        "int.irq2_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: EINT0 - external interrupt 0 from P3.2"
                }
            ],
            "id": "int.irq2_src",
            "name": "irq2_src",
            "offset": "0x8",
            "doc": "MCU IRQ2 ((EINT0) interrupt source identify"
        },
        "int.irq3_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: EINT1 - external interrupt 1 from P3.3"
                }
            ],
            "id": "int.irq3_src",
            "name": "irq3_src",
            "offset": "0xc",
            "doc": "MCU IRQ3 (EINT1) interrupt source identify"
        },
        "int.irq4_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1: P1_INT\nBit0: P0_INT"
                }
            ],
            "id": "int.irq4_src",
            "name": "irq4_src",
            "offset": "0x10",
            "doc": "MCU IRQ4 (P0/1) interrupt source identify"
        },
        "int.irq5_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2: P4_INT\nBit1: P3_INT\nBit0: P2_INT"
                }
            ],
            "id": "int.irq5_src",
            "name": "irq5_src",
            "offset": "0x14",
            "doc": "MCU IRQ5 (P2/3/4) interrupt source identify"
        },
        "int.irq6_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 4,
                    "nbits": 28,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 4,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit3: PWM3_INT\nBit2: PWM2_INT\nBit1: PWM1_INT\nBit0: PWM0_INT"
                }
            ],
            "id": "int.irq6_src",
            "name": "irq6_src",
            "offset": "0x18",
            "doc": "MCU IRQ6 (PWMA) interrupt source identify"
        },
        "int.irq7_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 4,
                    "nbits": 28,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 4,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit3: PWM7_INT\nBit2: PWM6_INT\nBit1: PWM5_INT\nBit0: PWM4_INT"
                }
            ],
            "id": "int.irq7_src",
            "name": "irq7_src",
            "offset": "0x1c",
            "doc": "MCU IRQ7 (PWMB) interrupt source identify"
        },
        "int.irq8_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: TMR0_INT"
                }
            ],
            "id": "int.irq8_src",
            "name": "irq8_src",
            "offset": "0x20",
            "doc": "MCU IRQ8 (TMR0) interrupt source identify"
        },
        "int.irq9_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: TMR1_INT"
                }
            ],
            "id": "int.irq9_src",
            "name": "irq9_src",
            "offset": "0x24",
            "doc": "MCU IRQ9 (TMR1) interrupt source identify"
        },
        "int.irq10_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: TMR2_INT"
                }
            ],
            "id": "int.irq10_src",
            "name": "irq10_src",
            "offset": "0x28",
            "doc": "MCU IRQ10 (TMR2) interrupt source identify"
        },
        "int.irq11_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: TMR3_INT"
                }
            ],
            "id": "int.irq11_src",
            "name": "irq11_src",
            "offset": "0x2c",
            "doc": "MCU IRQ11 (TMR3) interrupt source identify"
        },
        "int.irq12_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: URT0_INT"
                }
            ],
            "id": "int.irq12_src",
            "name": "irq12_src",
            "offset": "0x30",
            "doc": "MCU IRQ12 (URT0) interrupt source identify"
        },
        "int.irq13_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: URT1_INT"
                }
            ],
            "id": "int.irq13_src",
            "name": "irq13_src",
            "offset": "0x34",
            "doc": "MCU IRQ13 (URT1) interrupt source identify"
        },
        "int.irq14_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: SPI0_INT"
                }
            ],
            "id": "int.irq14_src",
            "name": "irq14_src",
            "offset": "0x38",
            "doc": "MCU IRQ14 (SPI0) interrupt source identify"
        },
        "int.irq15_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: SPI1_INT"
                }
            ],
            "id": "int.irq15_src",
            "name": "irq15_src",
            "offset": "0x3c",
            "doc": "MCU IRQ15 (SPI1) interrupt source identify"
        },
        "int.irq18_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: I2C_INT"
                }
            ],
            "id": "int.irq18_src",
            "name": "irq18_src",
            "offset": "0x48",
            "doc": "MCU IRQ18 (I2C) interrupt source identify"
        },
        "int.irq21_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "int.irq21_src",
            "name": "irq21_src",
            "offset": "0x54",
            "doc": "MCU IRQ21 (Reserved) interrupt source identify"
        },
        "int.irq22_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "int.irq22_src",
            "name": "irq22_src",
            "offset": "0x58",
            "doc": "MCU IRQ22 (Reserved) interrupt source identify"
        },
        "int.irq28_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: PWRWU_INT"
                }
            ],
            "id": "int.irq28_src",
            "name": "irq28_src",
            "offset": "0x70",
            "doc": "MCU IRQ28 (PWRWU) interrupt source identify"
        },
        "int.irq29_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Bit2 = 0\nBit1 = 0\nBit0: ADC_INT"
                }
            ],
            "id": "int.irq29_src",
            "name": "irq29_src",
            "offset": "0x74",
            "doc": "MCU IRQ29 (ADC) interrupt source identify"
        },
        "int.irq30_src": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 29,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "int_src",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "int.irq30_src",
            "name": "irq30_src",
            "offset": "0x78",
            "doc": "MCU IRQ30 (Reserved) interrupt source identify"
        },
        "int.nmi_sel": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 5,
                    "nbits": 27,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "nmi_sel",
                    "lsb": 0,
                    "nbits": 5,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "The NMI interrupt to Cortex-M0 can be selected from one of the interrupt[31:0]\nThe NMI_SEL bit[4:0] used to select the NMI interrupt source"
                }
            ],
            "id": "int.nmi_sel",
            "name": "nmi_sel",
            "offset": "0x80",
            "doc": "NMI source interrupt select control register"
        },
        "int.mcu_irq": {
            "type": "reg",
            "fields": [
                {
                    "name": "mcu_irq",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "MCU IRQ Source Register \nThe MCU_IRQ collect all the interrupts from the peripherals and generate the synchronous interrupt to MCU Cortex-M0. There are two modes to generate interrupt to MCU Cortex-M0, the normal mode and test mode.\nThe MCU_IRQ collects all interrupts from each peripheral and synchronizes them then interrupts the Cortex-M0. \nWhen the MCU_IRQ[n] is \"0\": Set MCU_IRQ[n] \"1\" will generate an interrupt to Cortex_M0 NVIC[n].\nWhen the MCU_IRQ[n] is \"1\"(mean an interrupt is assert) set 1 the MCU_bit[n] will clear the interrupt\nSet MCU_IRQ[n] \"0\": no any effect"
                }
            ],
            "id": "int.mcu_irq",
            "name": "mcu_irq",
            "offset": "0x84",
            "doc": "MCU IRQ Number identify register"
        },
        "pwma": {
            "type": "blk",
            "children": [
                "pwma.ppr",
                "pwma.csr",
                "pwma.pcr",
                "pwma.cnr0",
                "pwma.cmr0",
                "pwma.pdr0",
                "pwma.cnr1",
                "pwma.cmr1",
                "pwma.pdr1",
                "pwma.cnr2",
                "pwma.cmr2",
                "pwma.pdr2",
                "pwma.cnr3",
                "pwma.cmr3",
                "pwma.pdr3",
                "pwma.pier",
                "pwma.piir",
                "pwma.ccr0",
                "pwma.ccr2",
                "pwma.crlr0",
                "pwma.cflr0",
                "pwma.crlr1",
                "pwma.cflr1",
                "pwma.crlr2",
                "pwma.cflr2",
                "pwma.crlr3",
                "pwma.cflr3",
                "pwma.capenr",
                "pwma.poe"
            ],
            "id": "pwma",
            "name": "pwma",
            "offset": "0x40040000",
            "doc": "Registers group"
        },
        "pwma.ppr": {
            "type": "reg",
            "fields": [
                {
                    "name": "dzi23",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Dead zone interval register for pair of channel 2 and channel 3(PWM2 and PWM3 pair for PWM group A, PWM6 and PWM7 pair for PWM group B)\nThese 8 bits determine dead zone length.\nThe unit time of dead zone length is received from corresponding CSR bits."
                },
                {
                    "name": "dzi01",
                    "lsb": 16,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Dead zone interval register for pair of channel 0 and channel 1(PWM0 and PWM1 pair for PWM group A, PWM4 and PWM5 pair for PWM group B)\nThese 8 bits determine dead zone length.\nThe unit time of dead zone length is received from corresponding CSR bits."
                },
                {
                    "name": "cp23",
                    "lsb": 8,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Clock pre-scalar 2(PWM counter 2 & 3 for group A and PWM counter 6 & 7 for group B)\nClock input is divided by (CP23 + 1) before it is fed to the corresponding PWM counter\nIf CP23=0, then the pre-scalar 2 output clock will be stopped. So corresponding PWM counter will be stopped also."
                },
                {
                    "name": "cp01",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Clock pre-scalar 0(PWM counter 0 & 1 for group A and PWM counter 4 & 5 for group B)\nClock input is divided by (CP01 + 1) before it is fed to the corresponding PWM counter\nIf CP01=0, then the pre-scalar 0 output clock will be stopped. So corresponding PWM counter will be stopped also."
                }
            ],
            "id": "pwma.ppr",
            "name": "ppr",
            "offset": "0x0",
            "doc": "PWM Pre-scalar Register"
        },
        "pwma.csr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd3",
                    "lsb": 15,
                    "nbits": 17,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "csr3",
                    "lsb": 12,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer 3 Clock Source Selection (PWM timer 3 for group A and PWM timer 7 for group B)\nSelect clock input for timer.\nCSR3 [14:12]\tInput clock divided by\t\n100\t1\t\n011\t16\t\n010\t8\t\n001\t4\t\n000\t2\t"
                },
                {
                    "name": "rsvd2",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "csr2",
                    "lsb": 8,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer 2 Clock Source Selection(PWM timer 2 for group A and PWM timer 6 for group B)\nSelect clock input for timer.\n(Table is the same as CSR3)"
                },
                {
                    "name": "rsvd1",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "csr1",
                    "lsb": 4,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer 1 Clock Source Selection(PWM timer 1 for group A and PWM timer 5 for group B)\nSelect clock input for timer.\n(Table is the same as CSR3)"
                },
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "csr0",
                    "lsb": 0,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer 0 Clock Source Selection(PWM timer 0 for group A and PWM timer 4 for group B)\nSelect clock input for timer.\n(Table is the same as CSR3)"
                }
            ],
            "id": "pwma.csr",
            "name": "csr",
            "offset": "0x4",
            "doc": "PWM Clock Select Register"
        },
        "pwma.pcr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd7",
                    "lsb": 28,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ch3mod",
                    "lsb": 27,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM-Timer 3 Auto-reload/One-Shot Mode(PWM timer 3 for group A and PWM timer 7 for group B)\n1 = Auto-reload Mode\n0 = One-Shot Mode\nNote: If there is a rising transition at this bit, it will cause CNR3 and CMR3 be clear."
                },
                {
                    "name": "ch3inv",
                    "lsb": 26,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM-Timer 3 Output Inverter ON/OFF(PWM timer 3 for group A and PWM timer 7 for group B)\n1 = Inverter ON\n0 = Inverter OFF"
                },
                {
                    "name": "rsvd6",
                    "lsb": 25,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ch3en",
                    "lsb": 24,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM-Timer 3 Enable/Disable Start Run (PWM timer 3 for group A and PWM timer 7 for group B)\n1 = Enable corresponding PWM-Timer Start Run\n0 = Stop corresponding PWM-Timer Running"
                },
                {
                    "name": "rsvd5",
                    "lsb": 20,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ch2mod",
                    "lsb": 19,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM-Timer 2 Auto-reload/One-Shot Mode(PWM timer 2 for group A and PWM timer 6 for group B)\n1 = Auto-reload Mode\n0 = One-Shot Mode\nNote: If there is a rising transition at this bit, it will cause CNR2 and CMR2 be clear."
                },
                {
                    "name": "ch2inv",
                    "lsb": 18,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM-Timer 2 Output Inverter ON/OFF(PWM timer 2 for group A and PWM timer 6 for group B)\n1 = Inverter ON\n0 = Inverter OFF"
                },
                {
                    "name": "rsvd4",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ch2en",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM-Timer 2 Enable/Disable Start Run (PWM timer 2 for group A and PWM timer 6 for group B)\n1 = Enable corresponding PWM-Timer Start Run\n0 = Stop corresponding PWM-Timer Running"
                },
                {
                    "name": "rsvd3",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ch1mod",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM-Timer 1 Auto-reload/One-Shot Mode(PWM timer 1 for group A and PWM timer 5 for group B)\n1 = Auto-reload Mode\n0 = One-Shot Mode\nNote: If there is a rising transition at this bit, it will cause CNR1 and CMR1 be clear."
                },
                {
                    "name": "ch1inv",
                    "lsb": 10,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM-Timer 1 Output Inverter ON/OFF(PWM timer 1 for group A and PWM timer 5 for group B)\n1 = Inverter ON\n0 = Inverter OFF"
                },
                {
                    "name": "rsvd2",
                    "lsb": 9,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ch1en",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM-Timer 1 Enable/Disable Start Run (PWM timer 1 for group A and PWM timer 5 for group B)\n1 = Enable corresponding PWM-Timer Start Run\n0 = Stop corresponding PWM-Timer Running"
                },
                {
                    "name": "rsvd1",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dzen23",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Dead-Zone 2 Generator Enable/Disable(PWM2 and PWM3 pair for PWM group A, PWM6 and PWM7 pair for PWM group B)\n1 = Enable\n0 = Disable\nNote: When Dead-Zone Generator is enabled, the pair of PWM2 and PWM3 becomes a complementary pair for PWM group A and the pair of PWM6 and PWM7 becomes a complementary pair for PWM group B."
                },
                {
                    "name": "dzen01",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Dead-Zone 0 Generator Enable/Disable(PWM0 and PWM1 pair for PWM group A, PWM4 and PWM5 pair for PWM group B)\n1 = Enable\n0 = Disable\nNote: When Dead-Zone Generator is enabled, the pair of PWM0 and PWM1 becomes a complementary pair for PWM group A and the pair of PWM4 and PWM5 becomes a complementary pair for PWM group B."
                },
                {
                    "name": "ch0mod",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM-Timer 0 Auto-reload/One-Shot Mode(PWM timer 0 for group A and PWM timer 4 for group B)\n1 = Auto-reload Mode\n0 = One-Shot Mode\nNote: If there is a rising transition at this bit, it will cause CNR0 and CMR0 be clear."
                },
                {
                    "name": "ch0inv",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM-Timer 0 Output Inverter ON/OFF(PWM timer 0 for group A and PWM timer 4 for group B)\n1 = Inverter ON\n0 = Inverter OFF"
                },
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ch0en",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM-Timer 0 Enable/Disable Start Run (PWM timer 0 for group A and PWM timer 4 for group B)\n1 = Enable corresponding PWM-Timer Start Run\n0 = Stop corresponding PWM-Timer Running"
                }
            ],
            "id": "pwma.pcr",
            "name": "pcr",
            "offset": "0x8",
            "doc": "PWM Control Register"
        },
        "pwma.cnr0": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cnr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Counter/Timer Loaded Value\nCNR determines the PWM period.\n\nPWM frequency = PWMxy_CLK/(prescale+1)/(clock divider)/(CNR+1); where xy, could be 01, 23, 45 or 67, depends on selected PWM channel.\n\nDuty ratio = (CMR+1)/(CNR+1).\n\nCMR >= CNR: PWM output is always high.\n\nCMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit.\n\nCMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit\n\n(Unit = one PWM clock cycle)\nNote: Any write to CNR will take effect in next PWM cycle."
                }
            ],
            "id": "pwma.cnr0",
            "name": "cnr0",
            "offset": "0xc",
            "doc": "PWM Counter Register 0"
        },
        "pwma.cmr0": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cmr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Comparator Register\nCNR determines the PWM duty.\n\nPWM frequency = PWMxy_CLK/(prescale+1)/(clock divider)/(CNR+1); where xy, could be 01, 23, 45 or 67, depends on selected PWM channel.\n\nDuty ratio = (CMR+1)/(CNR+1).\n\nCMR >= CNR: PWM output is always high.\n\nCMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit.\n\nCMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit\n\n(Unit = one PWM clock cycle)\nNote: Any write to CNR will take effect in next PWM cycle."
                }
            ],
            "id": "pwma.cmr0",
            "name": "cmr0",
            "offset": "0x10",
            "doc": "PWM Comparator Register 0"
        },
        "pwma.pdr0": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pdr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "PWM Data Register\nUser can monitor PDR to know the current value in 16-bit down counter."
                }
            ],
            "id": "pwma.pdr0",
            "name": "pdr0",
            "offset": "0x14",
            "doc": "PWM Data Register 0"
        },
        "pwma.cnr1": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cnr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Counter/Timer Loaded Value\nCNR determines the PWM period.\n\nPWM frequency = PWMxy_CLK/(prescale+1)/(clock divider)/(CNR+1); where xy, could be 01, 23, 45 or 67, depends on selected PWM channel.\n\nDuty ratio = (CMR+1)/(CNR+1).\n\nCMR >= CNR: PWM output is always high.\n\nCMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit.\n\nCMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit\n\n(Unit = one PWM clock cycle)\nNote: Any write to CNR will take effect in next PWM cycle."
                }
            ],
            "id": "pwma.cnr1",
            "name": "cnr1",
            "offset": "0x18",
            "doc": "PWM Counter Register 1"
        },
        "pwma.cmr1": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cmr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Comparator Register\nCNR determines the PWM duty.\n\nPWM frequency = PWMxy_CLK/(prescale+1)/(clock divider)/(CNR+1); where xy, could be 01, 23, 45 or 67, depends on selected PWM channel.\n\nDuty ratio = (CMR+1)/(CNR+1).\n\nCMR >= CNR: PWM output is always high.\n\nCMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit.\n\nCMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit\n\n(Unit = one PWM clock cycle)\nNote: Any write to CNR will take effect in next PWM cycle."
                }
            ],
            "id": "pwma.cmr1",
            "name": "cmr1",
            "offset": "0x1c",
            "doc": "PWM Comparator Register 1"
        },
        "pwma.pdr1": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pdr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "PWM Data Register\nUser can monitor PDR to know the current value in 16-bit down counter."
                }
            ],
            "id": "pwma.pdr1",
            "name": "pdr1",
            "offset": "0x20",
            "doc": "PWM Data Register 1"
        },
        "pwma.cnr2": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cnr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Counter/Timer Loaded Value\nCNR determines the PWM period.\n\nPWM frequency = PWMxy_CLK/(prescale+1)/(clock divider)/(CNR+1); where xy, could be 01, 23, 45 or 67, depends on selected PWM channel.\n\nDuty ratio = (CMR+1)/(CNR+1).\n\nCMR >= CNR: PWM output is always high.\n\nCMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit.\n\nCMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit\n\n(Unit = one PWM clock cycle)\nNote: Any write to CNR will take effect in next PWM cycle."
                }
            ],
            "id": "pwma.cnr2",
            "name": "cnr2",
            "offset": "0x24",
            "doc": "PWM Counter Register 2"
        },
        "pwma.cmr2": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cmr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Comparator Register\nCNR determines the PWM duty.\n\nPWM frequency = PWMxy_CLK/(prescale+1)/(clock divider)/(CNR+1); where xy, could be 01, 23, 45 or 67, depends on selected PWM channel.\n\nDuty ratio = (CMR+1)/(CNR+1).\n\nCMR >= CNR: PWM output is always high.\n\nCMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit.\n\nCMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit\n\n(Unit = one PWM clock cycle)\nNote: Any write to CNR will take effect in next PWM cycle."
                }
            ],
            "id": "pwma.cmr2",
            "name": "cmr2",
            "offset": "0x28",
            "doc": "PWM Comparator Register 2"
        },
        "pwma.pdr2": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pdr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "PWM Data Register\nUser can monitor PDR to know the current value in 16-bit down counter."
                }
            ],
            "id": "pwma.pdr2",
            "name": "pdr2",
            "offset": "0x2c",
            "doc": "PWM Data Register 2"
        },
        "pwma.cnr3": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cnr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Counter/Timer Loaded Value\nCNR determines the PWM period.\n\nPWM frequency = PWMxy_CLK/(prescale+1)/(clock divider)/(CNR+1); where xy, could be 01, 23, 45 or 67, depends on selected PWM channel.\n\nDuty ratio = (CMR+1)/(CNR+1).\n\nCMR >= CNR: PWM output is always high.\n\nCMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit.\n\nCMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit\n\n(Unit = one PWM clock cycle)\nNote: Any write to CNR will take effect in next PWM cycle."
                }
            ],
            "id": "pwma.cnr3",
            "name": "cnr3",
            "offset": "0x30",
            "doc": "PWM Counter Register 3"
        },
        "pwma.cmr3": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cmr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Comparator Register\nCNR determines the PWM duty.\n\nPWM frequency = PWMxy_CLK/(prescale+1)/(clock divider)/(CNR+1); where xy, could be 01, 23, 45 or 67, depends on selected PWM channel.\n\nDuty ratio = (CMR+1)/(CNR+1).\n\nCMR >= CNR: PWM output is always high.\n\nCMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit.\n\nCMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit\n\n(Unit = one PWM clock cycle)\nNote: Any write to CNR will take effect in next PWM cycle."
                }
            ],
            "id": "pwma.cmr3",
            "name": "cmr3",
            "offset": "0x34",
            "doc": "PWM Comparator Register 3"
        },
        "pwma.pdr3": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pdr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "PWM Data Register\nUser can monitor PDR to know the current value in 16-bit down counter."
                }
            ],
            "id": "pwma.pdr3",
            "name": "pdr3",
            "offset": "0x38",
            "doc": "PWM Data Register 3"
        },
        "pwma.pier": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 4,
                    "nbits": 28,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pwmie3",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM channel 3 Interrupt Enable\n1 = Enable\n0 = Disable "
                },
                {
                    "name": "pwmie2",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM channel 2 Interrupt Enable\n1 = Enable\n0 = Disable "
                },
                {
                    "name": "pwmie1",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM channel 1 Interrupt Enable\n1 = Enable\n0 = Disable "
                },
                {
                    "name": "pwmie0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM channel 0 Interrupt Enable\n1 = Enable\n0 = Disable "
                }
            ],
            "id": "pwma.pier",
            "name": "pier",
            "offset": "0x40",
            "doc": "PWM Interrupt Enable Register"
        },
        "pwma.piir": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 4,
                    "nbits": 28,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pwmif3",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM channel 3 Interrupt Status\nFlag is set by hardware when PWM3 down counter reaches zero, software can clear this bit by writing a one to it."
                },
                {
                    "name": "pwmif2",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM channel 2 Interrupt Status\nFlag is set by hardware when PWM2 down counter reaches zero, software can clear this bit by writing a one to it."
                },
                {
                    "name": "pwmif1",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM channel 1 Interrupt Status\nFlag is set by hardware when PWM1 down counter reaches zero, software can clear this bit by writing a one to it."
                },
                {
                    "name": "pwmif0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM channel 0 Interrupt Status\nFlag is set by hardware when PWM0 down counter reaches zero, software can clear this bit by writing a one to it."
                }
            ],
            "id": "pwma.piir",
            "name": "piir",
            "offset": "0x44",
            "doc": "PWM Interrupt Indication Register"
        },
        "pwma.ccr0": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd3",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cflri1",
                    "lsb": 23,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "CFLR1 Latched Indicator Bit\n\nWhen PWM group input channel 1 has a falling transition, CFLR1 was latched with the value of PWM down-counter and this bit is set by hardware.\n\nClear this bit by writing a one to it."
                },
                {
                    "name": "crlri1",
                    "lsb": 22,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "CRLR1 Latched Indicator Bit\n\nWhen PWM group input channel 1 has a rising transition, CRLR1 was latched with the value of PWM down-counter and this bit is set by hardware.\n\nClear this bit by writing a one to it."
                },
                {
                    "name": "rsvd2",
                    "lsb": 21,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "capif1",
                    "lsb": 20,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Capture1 Interrupt Indication Flag\n\nIf PWM group channel 1 rising latch interrupt is enabled (CRL_IE1=1), a rising transition occurs at PWM group channel 1 will result in CAPIF1 to high; Similarly, a falling transition will cause CAPIF1 to be set high if PWM group channel 1 falling latch interrupt is enabled (CFL_IE1=1). This flag is clear by software with a write 1 to itself."
                },
                {
                    "name": "capch1en",
                    "lsb": 19,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Capture Channel 1 transition Enable/Disable\n1 = Enable capture function on PWM group channel 1.\n0 = Disable capture function on PWM group channel 1\nWhen Enable, Capture latched the PWM-counter value and saved to CRLR (Rising latch) and CFLR (Falling latch).\nWhen Disable, Capture does not update CRLR and CFLR, and disable PWM group channel 1 Interrupt."
                },
                {
                    "name": "cfl_ie1",
                    "lsb": 18,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Group Channel 1 Falling Latch Interrupt Enable ON/OFF\n1 = Enable falling latch interrupt\n0 = Disable falling latch interrupt\nWhen Enable, if Capture detects PWM group channel 1 has falling transition, Capture issues an Interrupt."
                },
                {
                    "name": "crl_ie1",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Group Channel 1 Rising Latch Interrupt Enable ON/OFF\n1 = Enable rising latch interrupt\n0 = Disable rising latch interrupt\nWhen Enable, if Capture detects PWM group channel 1 has rising transition, Capture issues an Interrupt."
                },
                {
                    "name": "inv1",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Group Channel 1 Inverter ON/OFF\n\n1 = Inverter ON. Reverse the input signal from GPIO before fed to Capture timer\n0 = Inverter OFF"
                },
                {
                    "name": "rsvd1",
                    "lsb": 8,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cflri0",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "CFLR0 Latched Indicator Bit\n\nWhen PWM group input channel 0 has a falling transition, CFLR0 was latched with the value of PWM down-counter and this bit is set by hardware.\n\nClear this bit by writing a one to it."
                },
                {
                    "name": "crlri0",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "CRLR0 Latched Indicator Bit\n\nWhen PWM group input channel 0 has a rising transition, CRLR0 was latched with the value of PWM down-counter and this bit is set by hardware.\n\nClear this bit by writing a one to it."
                },
                {
                    "name": "rsvd0",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "capif0",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Capture0 Interrupt Indication Flag\n\nIf PWM group channel 0 rising latch interrupt is enabled (CRL_IE0=1), a rising transition occurs at PWM group channel 0 will result in CAPIF0 to high; Similarly, a falling transition will cause CAPIF0 to be set high if PWM group channel 0 falling latch interrupt is enabled (CFL_IE0=1). This flag is clear by software with a write 1 to itself."
                },
                {
                    "name": "capch0en",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Capture Channel 0 transition Enable/Disable\n1 = Enable capture function on PWM group channel 0.\n0 = Disable capture function on PWM group channel 0\nWhen Enable, Capture latched the PWM-counter value and saved to CRLR (Rising latch) and CFLR (Falling latch).\nWhen Disable, Capture does not update CRLR and CFLR, and disable PWM group channel 0 Interrupt."
                },
                {
                    "name": "cfl_ie0",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Group Channel 0 Falling Latch Interrupt Enable ON/OFF\n1 = Enable falling latch interrupt\n0 = Disable falling latch interrupt\nWhen Enable, if Capture detects PWM group channel 0 has falling transition, Capture issues an Interrupt."
                },
                {
                    "name": "crl_ie0",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Group Channel 0 Rising Latch Interrupt Enable ON/OFF\n1 = Enable rising latch interrupt\n0 = Disable rising latch interrupt\nWhen Enable, if Capture detects PWM group channel 0 has rising transition, Capture issues an Interrupt."
                },
                {
                    "name": "inv0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Group Channel 0 Inverter ON/OFF\n\n1 = Inverter ON. Reverse the input signal from GPIO before fed to Capture timer\n0 = Inverter OFF"
                }
            ],
            "id": "pwma.ccr0",
            "name": "ccr0",
            "offset": "0x50",
            "doc": "Capture Control Register"
        },
        "pwma.ccr2": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd3",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cflri3",
                    "lsb": 23,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "CFLR3 Latched Indicator Bit\n\nWhen PWM group input channel 3 has a falling transition, CFLR3 was latched with the value of PWM down-counter and this bit is set by hardware.\n\nClear this bit by writing a one to it."
                },
                {
                    "name": "crlri3",
                    "lsb": 22,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "CRLR3 Latched Indicator Bit\n\nWhen PWM group input channel 3 has a rising transition, CRLR3 was latched with the value of PWM down-counter and this bit is set by hardware.\n\nClear this bit by writing a one to it."
                },
                {
                    "name": "rsvd2",
                    "lsb": 21,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "capif3",
                    "lsb": 20,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Capture3 Interrupt Indication Flag\n\nIf PWM group channel 3 rising latch interrupt is enabled (CRL_IE3=1), a rising transition occurs at PWM group channel 3 will result in CAPIF3 to high; Similarly, a falling transition will cause CAPIF3 to be set high if PWM group channel 3 falling latch interrupt is enabled (CFL_IE3=1). This flag is clear by software with a write 1 to itself."
                },
                {
                    "name": "capch3en",
                    "lsb": 19,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Capture Channel 3 transition Enable/Disable\n1 = Enable capture function on PWM group channel 3.\n0 = Disable capture function on PWM group channel 3\nWhen Enable, Capture latched the PWM-counter value and saved to CRLR (Rising latch) and CFLR (Falling latch).\nWhen Disable, Capture does not update CRLR and CFLR, and disable PWM group channel 3 Interrupt."
                },
                {
                    "name": "cfl_ie3",
                    "lsb": 18,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Group Channel 3 Falling Latch Interrupt Enable ON/OFF\n1 = Enable falling latch interrupt\n0 = Disable falling latch interrupt\nWhen Enable, if Capture detects PWM group channel 3 has falling transition, Capture issues an Interrupt."
                },
                {
                    "name": "crl_ie3",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Group Channel 3 Rising Latch Interrupt Enable ON/OFF\n1 = Enable rising latch interrupt\n0 = Disable rising latch interrupt\nWhen Enable, if Capture detects PWM group channel 3 has rising transition, Capture issues an Interrupt."
                },
                {
                    "name": "inv3",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Group Channel 3 Inverter ON/OFF\n\n1 = Inverter ON. Reverse the input signal from GPIO before fed to Capture timer\n0 = Inverter OFF"
                },
                {
                    "name": "rsvd1",
                    "lsb": 8,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cflri2",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "CFLR2 Latched Indicator Bit\n\nWhen PWM group input channel 2 has a falling transition, CFLR2 was latched with the value of PWM down-counter and this bit is set by hardware.\n\nClear this bit by writing a one to it."
                },
                {
                    "name": "crlri2",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "CRLR2 Latched Indicator Bit\n\nWhen PWM group input channel 2 has a rising transition, CRLR2 was latched with the value of PWM down-counter and this bit is set by hardware.\n\nClear this bit by writing a one to it."
                },
                {
                    "name": "rsvd0",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "capif2",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Capture2 Interrupt Indication Flag\n\nIf PWM group channel 2 rising latch interrupt is enabled (CRL_IE2=1), a rising transition occurs at PWM group channel 2 will result in CAPIF2 to high; Similarly, a falling transition will cause CAPIF2 to be set high if PWM group channel 2 falling latch interrupt is enabled (CFL_IE2=1). This flag is clear by software with a write 1 to itself."
                },
                {
                    "name": "capch2en",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Capture Channel 2 transition Enable/Disable\n1 = Enable capture function on PWM group channel 2.\n0 = Disable capture function on PWM group channel 2\nWhen Enable, Capture latched the PWM-counter value and saved to CRLR (Rising latch) and CFLR (Falling latch).\nWhen Disable, Capture does not update CRLR and CFLR, and disable PWM group channel 2 Interrupt."
                },
                {
                    "name": "cfl_ie2",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Group Channel 2 Falling Latch Interrupt Enable ON/OFF\n1 = Enable falling latch interrupt\n0 = Disable falling latch interrupt\nWhen Enable, if Capture detects PWM group channel 2 has falling transition, Capture issues an Interrupt."
                },
                {
                    "name": "crl_ie2",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Group Channel 2 Rising Latch Interrupt Enable ON/OFF\n1 = Enable rising latch interrupt\n0 = Disable rising latch interrupt\nWhen Enable, if Capture detects PWM group channel 2 has rising transition, Capture issues an Interrupt."
                },
                {
                    "name": "inv2",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Group Channel 2 Inverter ON/OFF\n\n1 = Inverter ON. Reverse the input signal from GPIO before fed to Capture timer\n0 = Inverter OFF"
                }
            ],
            "id": "pwma.ccr2",
            "name": "ccr2",
            "offset": "0x54",
            "doc": "Capture Control Register"
        },
        "pwma.crlr0": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "crlr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Capture Rising Latch Register\nLatch the PWM counter when Channel 0/1/2/3 has rising transition."
                }
            ],
            "id": "pwma.crlr0",
            "name": "crlr0",
            "offset": "0x58",
            "doc": "Capture Rising Latch Register (Channel 0)"
        },
        "pwma.cflr0": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cflr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Capture Falling Latch Register\nLatch the PWM counter when Channel 01/2/3 has Falling transition."
                }
            ],
            "id": "pwma.cflr0",
            "name": "cflr0",
            "offset": "0x5c",
            "doc": "Capture Falling Latch Register (Channel 0)"
        },
        "pwma.crlr1": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "crlr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Capture Rising Latch Register\nLatch the PWM counter when Channel 0/1/2/3 has rising transition."
                }
            ],
            "id": "pwma.crlr1",
            "name": "crlr1",
            "offset": "0x60",
            "doc": "Capture Rising Latch Register (Channel 1)"
        },
        "pwma.cflr1": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cflr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Capture Falling Latch Register\nLatch the PWM counter when Channel 01/2/3 has Falling transition."
                }
            ],
            "id": "pwma.cflr1",
            "name": "cflr1",
            "offset": "0x64",
            "doc": "Capture Falling Latch Register (Channel 1)"
        },
        "pwma.crlr2": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "crlr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Capture Rising Latch Register\nLatch the PWM counter when Channel 0/1/2/3 has rising transition."
                }
            ],
            "id": "pwma.crlr2",
            "name": "crlr2",
            "offset": "0x68",
            "doc": "Capture Rising Latch Register (channel 2)"
        },
        "pwma.cflr2": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cflr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Capture Falling Latch Register\nLatch the PWM counter when Channel 0/1/2/3 has Falling transition."
                }
            ],
            "id": "pwma.cflr2",
            "name": "cflr2",
            "offset": "0x6c",
            "doc": "Capture Falling Latch Register (channel 2)"
        },
        "pwma.crlr3": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "crlr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Capture Rising Latch Register\nLatch the PWM counter when Channel 0/1/2/3 has rising transition."
                }
            ],
            "id": "pwma.crlr3",
            "name": "crlr3",
            "offset": "0x70",
            "doc": "Capture Rising Latch Register (channel 3)"
        },
        "pwma.cflr3": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cflr",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Capture Falling Latch Register\nLatch the PWM counter when Channel 0/1/2/3 has Falling transition."
                }
            ],
            "id": "pwma.cflr3",
            "name": "cflr3",
            "offset": "0x74",
            "doc": "Capture Falling Latch Register (channel 3)"
        },
        "pwma.capenr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 4,
                    "nbits": 28,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "capenr",
                    "lsb": 0,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Capture Input Enable Register\nThere are four capture inputs from pad. Bit0~Bit3 are used to control each inputs ON or OFF. \n0 = OFF (PWMx multi-function pin input does not affect input capture function.)\n1 = (PWMx multi-function pin input will affect its input capture function.)\n\n\n\nCAPENR\nBit 3210 for PWM group A\nBit xxx1 -> Capture channel 0 is from P2 [0] \nBit xx1x -> Capture channel 1 is from P2 [1] \nBit x1xx -> Capture channel 2 is from P2 [2]\nBit 1xxx -> Capture channel 3 is from P2 [3]\nBit 3210 for PWM group B\nBit xxx1 -> Capture channel 0 is from P2 [4] \nBit xx1x -> Capture channel 1 is from P2 [5] \nBit x1xx -> Capture channel 2 is from P2 [6]\nBit 1xxx -> Capture channel 3 is from P2 [7]"
                }
            ],
            "id": "pwma.capenr",
            "name": "capenr",
            "offset": "0x78",
            "doc": "Capture Input Enable Register"
        },
        "pwma.poe": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 4,
                    "nbits": 28,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pwm3",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Channel 3 Output Enable Register\n1 = Enable PWM channel 3 output to pin.\n0 = Disable PWM channel 3 output to pin.\nNote: The corresponding GPIO pin also must be switched to PWM function."
                },
                {
                    "name": "pwm2",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Channel 2 Output Enable Register\n1 = Enable PWM channel 2 output to pin.\n0 = Disable PWM channel 2 output to pin.\nNote: The corresponding GPIO pin also must be switched to PWM function."
                },
                {
                    "name": "pwm1",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Channel 1 Output Enable Register\n1 = Enable PWM channel 1 output to pin.\n0 = Disable PWM channel 1 output to pin.\nNote: The corresponding GPIO pin also must be switched to PWM function."
                },
                {
                    "name": "pwm0",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "PWM Channel 0 Output Enable Register\n1 = Enable PWM channel 0 output to pin.\n0 = Disable PWM channel 0 output to pin.\nNote: The corresponding GPIO pin also must be switched to PWM function."
                }
            ],
            "id": "pwma.poe",
            "name": "poe",
            "offset": "0x7c",
            "doc": "PWM Output Enable"
        },
        "pwmb": {
            "type": "blk",
            "children": [],
            "id": "pwmb",
            "name": "pwmb",
            "offset": "0x40140000",
            "doc": ""
        },
        "scs": {
            "type": "blk",
            "children": [
                "scs.syst_csr",
                "scs.syst_rvr",
                "scs.syst_cvr",
                "scs.nvic_iser",
                "scs.nvic_icer",
                "scs.nvic_ispr",
                "scs.nvic_icpr",
                "scs.nvic_ipr0",
                "scs.nvic_ipr1",
                "scs.nvic_ipr2",
                "scs.nvic_ipr3",
                "scs.nvic_ipr4",
                "scs.nvic_ipr5",
                "scs.nvic_ipr6",
                "scs.nvic_ipr7",
                "scs.cpuid",
                "scs.icsr",
                "scs.aircr",
                "scs.scr",
                "scs.shpr2",
                "scs.shpr3"
            ],
            "id": "scs",
            "name": "scs",
            "offset": "0xe000e000",
            "doc": "Registers group"
        },
        "scs.syst_csr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 17,
                    "nbits": 15,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "countflag",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Returns 1 if timer counted to 0 since last time this register was read.\nCOUNTFLAG is set by a count transition from 1 to 0.\nCOUNTFLAG is cleared on read or by a write to the Current Value register."
                },
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 13,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "clksrc",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "1 = Core clock used for SysTick.\n0 = Clock source is optional, refer to STCLK_S."
                },
                {
                    "name": "tickint",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "1 = Counting down to 0 will cause the SysTick exception to be pended. Clearing the SysTick Current Value register by a register write in software will not cause SysTick to be pended.\n0 = Counting down to 0 does not cause the SysTick exception to be pended. Software can use COUNTFLAG to determine if a count to zero has occurred."
                },
                {
                    "name": "enable",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "1 = The counter will operate in a multi-shot manner.\n0 = The counter is disabled"
                }
            ],
            "id": "scs.syst_csr",
            "name": "syst_csr",
            "offset": "0x10",
            "doc": "SysTick Control and Status Register"
        },
        "scs.syst_rvr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "reload",
                    "lsb": 0,
                    "nbits": 24,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Value to load into the Current Value register when the counter reaches 0."
                }
            ],
            "id": "scs.syst_rvr",
            "name": "syst_rvr",
            "offset": "0x14",
            "doc": "SysTick Reload value Register"
        },
        "scs.syst_cvr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "current",
                    "lsb": 0,
                    "nbits": 24,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Current counter value. This is the value of the counter at the time it is sampled. The counter does not provide read-modify-write protection. The register is write-clear. A software write of any value will clear the register to 0. Unsupported bits RAZ (see SysTick Reload Value register)."
                }
            ],
            "id": "scs.syst_cvr",
            "name": "syst_cvr",
            "offset": "0x18",
            "doc": "SysTick Current value Register"
        },
        "scs.nvic_iser": {
            "type": "reg",
            "fields": [
                {
                    "name": "setena",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Enable one or more interrupts within a group of 32. Each bit represents an interrupt number from IRQ0 ~ IRQ31 (Vector number from 16 ~ 47). \nWriting 1 will enable the associated interrupt.\nWriting 0 has no effect.\nThe register reads back with the current enable state."
                }
            ],
            "id": "scs.nvic_iser",
            "name": "nvic_iser",
            "offset": "0x100",
            "doc": "IRQ0 ~ IRQ31 Set-Enable Control Register"
        },
        "scs.nvic_icer": {
            "type": "reg",
            "fields": [
                {
                    "name": "clrena",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Disable one or more interrupts within a group of 32. Each bit represents an interrupt number from IRQ0 ~ IRQ31 (Vector number from 16 ~ 47). \nWriting 1 will disable the associated interrupt.\nWriting 0 has no effect.\nThe register reads back with the current enable state."
                }
            ],
            "id": "scs.nvic_icer",
            "name": "nvic_icer",
            "offset": "0x180",
            "doc": "IRQ0 ~ IRQ31 Clear-Enable Control Register"
        },
        "scs.nvic_ispr": {
            "type": "reg",
            "fields": [
                {
                    "name": "setpend",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Writing 1 to a bit pends the associated interrupt under software control. Each bit represents an interrupt number from IRQ0 ~ IRQ31 (Vector number from 16 ~ 47).\nWriting 0 has no effect.\nThe register reads back with the current pending state."
                }
            ],
            "id": "scs.nvic_ispr",
            "name": "nvic_ispr",
            "offset": "0x200",
            "doc": "IRQ0 ~ IRQ31 Set-Pending Control Register"
        },
        "scs.nvic_icpr": {
            "type": "reg",
            "fields": [
                {
                    "name": "clrpend",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Writing 1 to a bit un-pends the associated interrupt under software control. Each bit represents an interrupt number from IRQ0 ~ IRQ31 (Vector number from 16 ~ 47).\nWriting 0 has no effect.\nThe register reads back with the current pending state."
                }
            ],
            "id": "scs.nvic_icpr",
            "name": "nvic_icpr",
            "offset": "0x280",
            "doc": "IRQ0 ~ IRQ31 Clear-Pending Control Register"
        },
        "scs.nvic_ipr0": {
            "type": "reg",
            "fields": [
                {
                    "name": "pri_3",
                    "lsb": 30,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ3\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd2",
                    "lsb": 24,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_2",
                    "lsb": 22,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ2\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd1",
                    "lsb": 16,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_1",
                    "lsb": 14,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ1\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_0",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ0\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd3",
                    "lsb": 0,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "scs.nvic_ipr0",
            "name": "nvic_ipr0",
            "offset": "0x400",
            "doc": "IRQ0 ~ IRQ3 Priority Control Register"
        },
        "scs.nvic_ipr1": {
            "type": "reg",
            "fields": [
                {
                    "name": "pri_7",
                    "lsb": 30,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ7\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd2",
                    "lsb": 24,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_6",
                    "lsb": 22,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ6\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd1",
                    "lsb": 16,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_5",
                    "lsb": 14,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ5\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_4",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ4\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd3",
                    "lsb": 0,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "scs.nvic_ipr1",
            "name": "nvic_ipr1",
            "offset": "0x404",
            "doc": "IRQ4 ~ IRQ7 Priority Control Register"
        },
        "scs.nvic_ipr2": {
            "type": "reg",
            "fields": [
                {
                    "name": "pri_11",
                    "lsb": 30,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ11\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd2",
                    "lsb": 24,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_10",
                    "lsb": 22,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ10\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd1",
                    "lsb": 16,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_9",
                    "lsb": 14,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ9\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_8",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ8\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd3",
                    "lsb": 0,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "scs.nvic_ipr2",
            "name": "nvic_ipr2",
            "offset": "0x408",
            "doc": "IRQ8 ~ IRQ11 Priority Control Register"
        },
        "scs.nvic_ipr3": {
            "type": "reg",
            "fields": [
                {
                    "name": "pri_15",
                    "lsb": 30,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ15\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd2",
                    "lsb": 24,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_14",
                    "lsb": 22,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ14\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd1",
                    "lsb": 16,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_13",
                    "lsb": 14,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ13\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_12",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ12\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd3",
                    "lsb": 0,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "scs.nvic_ipr3",
            "name": "nvic_ipr3",
            "offset": "0x40c",
            "doc": "IRQ12 ~ IRQ15 Priority Control Register"
        },
        "scs.nvic_ipr4": {
            "type": "reg",
            "fields": [
                {
                    "name": "pri_19",
                    "lsb": 30,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ19\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd2",
                    "lsb": 24,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_18",
                    "lsb": 22,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ18\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd1",
                    "lsb": 16,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_17",
                    "lsb": 14,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ17\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_16",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ16\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd3",
                    "lsb": 0,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "scs.nvic_ipr4",
            "name": "nvic_ipr4",
            "offset": "0x410",
            "doc": "IRQ16 ~ IRQ19 Priority Control Register"
        },
        "scs.nvic_ipr5": {
            "type": "reg",
            "fields": [
                {
                    "name": "pri_23",
                    "lsb": 30,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ23\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd2",
                    "lsb": 24,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_22",
                    "lsb": 22,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ22\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd1",
                    "lsb": 16,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_21",
                    "lsb": 14,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ21\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_20",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ20\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd3",
                    "lsb": 0,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "scs.nvic_ipr5",
            "name": "nvic_ipr5",
            "offset": "0x414",
            "doc": "IRQ20 ~ IRQ23 Priority Control Register"
        },
        "scs.nvic_ipr6": {
            "type": "reg",
            "fields": [
                {
                    "name": "pri_27",
                    "lsb": 30,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ27\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd2",
                    "lsb": 24,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_26",
                    "lsb": 22,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ26\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd1",
                    "lsb": 16,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_25",
                    "lsb": 14,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ25\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_24",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ24\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd3",
                    "lsb": 0,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "scs.nvic_ipr6",
            "name": "nvic_ipr6",
            "offset": "0x418",
            "doc": "IRQ24 ~ IRQ27 Priority Control Register"
        },
        "scs.nvic_ipr7": {
            "type": "reg",
            "fields": [
                {
                    "name": "pri_31",
                    "lsb": 30,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ31\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd2",
                    "lsb": 24,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_30",
                    "lsb": 22,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ30\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd1",
                    "lsb": 16,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_29",
                    "lsb": 14,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ29\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_28",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of IRQ28\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd3",
                    "lsb": 0,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "scs.nvic_ipr7",
            "name": "nvic_ipr7",
            "offset": "0x41c",
            "doc": "IRQ28 ~ IRQ31 Priority Control Register"
        },
        "scs.cpuid": {
            "type": "reg",
            "fields": [
                {
                    "name": "implementer",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "read-only",
                    "reset": "65",
                    "doc": "Implementer code assigned by ARM. ( ARM = 0x41)"
                },
                {
                    "name": "rsvd0",
                    "lsb": 20,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "part",
                    "lsb": 16,
                    "nbits": 4,
                    "access": "read-only",
                    "reset": "12",
                    "doc": "Reads as 0xC for ARMv6-M parts"
                },
                {
                    "name": "partno",
                    "lsb": 4,
                    "nbits": 12,
                    "access": "read-only",
                    "reset": "3104",
                    "doc": "Reads as 0xC20."
                },
                {
                    "name": "revision",
                    "lsb": 0,
                    "nbits": 4,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Reads as 0x0"
                }
            ],
            "id": "scs.cpuid",
            "name": "cpuid",
            "offset": "0xd00",
            "doc": "CPUID Base Register"
        },
        "scs.icsr": {
            "type": "reg",
            "fields": [
                {
                    "name": "nmipendset",
                    "lsb": 31,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Setting this bit will activate an NMI. Since NMI is the highest priority exception, it will activate as soon as it is registered. Reads back with current state (1 if Pending, 0 if not)."
                },
                {
                    "name": "rsvd3",
                    "lsb": 29,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pendsvset",
                    "lsb": 28,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Set a pending PendSV interrupt. This is normally used to request a context switch. Reads back with current state (1 if Pending, 0 if not)."
                },
                {
                    "name": "pendsvclr",
                    "lsb": 27,
                    "nbits": 1,
                    "access": "write-only",
                    "reset": "0",
                    "doc": "Write 1 to clear a pending PendSV interrupt."
                },
                {
                    "name": "pendstset",
                    "lsb": 26,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Set a pending SysTick. Reads back with current state (1 if Pending, 0 if not)."
                },
                {
                    "name": "pendstclr",
                    "lsb": 25,
                    "nbits": 1,
                    "access": "write-only",
                    "reset": "0",
                    "doc": "Write 1 to clear a pending SysTick."
                },
                {
                    "name": "rsvd2",
                    "lsb": 24,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "isrpreempt",
                    "lsb": 23,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "If set, a pending exception will be serviced on exit from the debug halt state."
                },
                {
                    "name": "isrpending",
                    "lsb": 22,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Indicates if an external configurable (NVIC generated) interrupt is pending."
                },
                {
                    "name": "rsvd1",
                    "lsb": 21,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "vectpending",
                    "lsb": 12,
                    "nbits": 9,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Indicates the exception number for the highest priority pending exception. The pending state includes the effect of memory-mapped enable and mask registers. It does not include the PRIMASK special-purpose register qualifier. A value of zero indicates no pending exceptions."
                },
                {
                    "name": "rsvd0",
                    "lsb": 9,
                    "nbits": 3,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "vectactive",
                    "lsb": 0,
                    "nbits": 9,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "0 = Thread mode\nvalue > 1: the exception number for the current executing exception."
                }
            ],
            "id": "scs.icsr",
            "name": "icsr",
            "offset": "0xd04",
            "doc": "Interrupt Control State Register"
        },
        "scs.aircr": {
            "type": "reg",
            "fields": [
                {
                    "name": "vectorkey",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "When write this register, this field should be 0x05FA, otherwise the write action will be unpredictable. "
                },
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 13,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "sysresetreq",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "write-only",
                    "reset": "0",
                    "doc": "Writing this bit 1 will cause a reset signal to be asserted to the chip to indicate a reset is requested. The bit is a write only bit and self-clears as part of the reset sequence. "
                },
                {
                    "name": "vectclractive",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "write-only",
                    "reset": "0",
                    "doc": "Set this bit to 1 will clears all active state information for fixed and configurable exceptions. The bit is a write only bit and can only be written when the core is halted. Note: It is the debugger's responsibility to re-initialize the stack. "
                },
                {
                    "name": "rsvd1",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "scs.aircr",
            "name": "aircr",
            "offset": "0xd0c",
            "doc": "Application Interrupt and Reset Control Register"
        },
        "scs.scr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd2",
                    "lsb": 5,
                    "nbits": 27,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "sevonpend",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "When enabled, interrupt transitions from Inactive to Pending are included in the list of wakeup events for the WFE instruction."
                },
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "sleepdeep",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "A qualifying hint that indicates waking from sleep might take longer."
                },
                {
                    "name": "sleeponexit",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "When set to 1, the core can enter a sleep state on an exception return to Thread mode. This is the mode and exception level entered at reset, the base level of execution."
                },
                {
                    "name": "rsvd1",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "scs.scr",
            "name": "scr",
            "offset": "0xd10",
            "doc": "System Control Register"
        },
        "scs.shpr2": {
            "type": "reg",
            "fields": [
                {
                    "name": "pri_11",
                    "lsb": 30,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of system handler 11 - SVCall\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd0",
                    "lsb": 0,
                    "nbits": 30,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "scs.shpr2",
            "name": "shpr2",
            "offset": "0xd1c",
            "doc": "System Handler Priority Register 2"
        },
        "scs.shpr3": {
            "type": "reg",
            "fields": [
                {
                    "name": "pri_15",
                    "lsb": 30,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of system handler 15 - SysTick\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd0",
                    "lsb": 24,
                    "nbits": 6,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "pri_14",
                    "lsb": 22,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Priority of system handler 14 - PendSV\n\"0\" denotes the highest priority & \"3\" denotes lowest priority"
                },
                {
                    "name": "rsvd1",
                    "lsb": 0,
                    "nbits": 22,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "scs.shpr3",
            "name": "shpr3",
            "offset": "0xd20",
            "doc": "System Handler Priority Register 3"
        },
        "tmr0": {
            "type": "blk",
            "children": [
                "tmr0.tcsr",
                "tmr0.tcmpr",
                "tmr0.tisr",
                "tmr0.tdr"
            ],
            "id": "tmr0",
            "name": "tmr0",
            "offset": "0x40010000",
            "doc": "Registers group"
        },
        "tmr0.tcsr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd2",
                    "lsb": 31,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cen",
                    "lsb": 30,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer Enable Bit\n1 = Starts counting\n0 = Stops/Suspends counting\nNote1: In stop status, and then set CEN to 1 will enables the 24-bit up-timer keeps up counting from the last stop counting value.\nNote2: This bit is auto-cleared by hardware in one-shot mode (MODE[28:27]=00) when the associated timer interrupt is generated (IE[29]=1)."
                },
                {
                    "name": "ie",
                    "lsb": 29,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Interrupt Enable Bit\n1 = Enable timer Interrupt.\n0 = Disable timer Interrupt. \nIf timer interrupt is enabled, the timer asserts its interrupt signal when the associated up-timer value is equal to TCMPR."
                },
                {
                    "name": "mode",
                    "lsb": 27,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer Operating Mode\nMODE\tTimer Operating Mode\t\n00\tThe timer is operating in the one-shot mode. The associated interrupt signal is generated once (if IE is enabled) and CEN is automatically cleared by hardware.\t\n01\tThe timer is operating in the periodic mode. The associated interrupt signal is generated periodically (if IE is enabled).\t\n10\tThe timer is operating in the toggle mode. The interrupt signal is generated periodically (if IE is enabled). And the associated signal (tout) is changing back and forth with 50% duty cycle.\t\n11\tReserved \t"
                },
                {
                    "name": "crst",
                    "lsb": 26,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer Reset Bit\nSet this bit will reset the 24-bit up-timer, 8-bit pre-scale counter and also force CEN to 0.\n0 = No effect.\n1 = Reset Timer's 8-bit pre-scale counter, internal 24-bit up-timer and CEN bit."
                },
                {
                    "name": "cact",
                    "lsb": 25,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Timer Active Status Bit (Read only)\nThis bit indicates the up-timer status.\n0 = Timer is not active.\n1 = Timer is active."
                },
                {
                    "name": "rsvd1",
                    "lsb": 17,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "tdr_en",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Data Load Enable\nWhen TDR_EN is set, TDR (Timer Data Register) will be updated continuously with the 24-bit up-timer value as the timer is counting. \n1 = Timer Data Register update enable.\n0 = Timer Data Register update disable. "
                },
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "prescale",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "5",
                    "doc": "Pre-scale Counter\nClock input is divided by PRESCALE+1 before it is fed to the counter. If PRESCALE=0, then there is no scaling."
                }
            ],
            "id": "tmr0.tcsr",
            "name": "tcsr",
            "offset": "0x0",
            "doc": "Timer0 Control and Status Register"
        },
        "tmr0.tcmpr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "tcmp",
                    "lsb": 0,
                    "nbits": 24,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer Compared Value\nTCMP is a 24-bit compared register. When the internal 24-bit up-timer counts and its value is equal to TCMP value, a Timer Interrupt is requested if the timer interrupt is enabled with TCSR.IE[29]=1. The TCMP value defines the timer counting cycle time.\nTime out period = (Period of timer clock input) * (8-bit PRESCALE + 1) * (24-bit TCMP)\nNOTE1: Never write 0x0 or 0x1 in TCMP, or the core will run into unknown state.\nNOTE2: No matter CEN is 0 or 1, whenever software write a new value into this register, TIMER will restart counting using this new value and abort previous count."
                }
            ],
            "id": "tmr0.tcmpr",
            "name": "tcmpr",
            "offset": "0x4",
            "doc": "Timer0 Compare Register"
        },
        "tmr0.tisr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 31,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "tif",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Timer Interrupt Flag\nThis bit indicates the interrupt status of Timer.\nTIF bit is set by hardware when the up counting value of internal 24-bit timer matches the timer compared value (TCMP). It is cleared by writing 1 to this bit."
                }
            ],
            "id": "tmr0.tisr",
            "name": "tisr",
            "offset": "0x8",
            "doc": "Timer0 Interrupt Status Register"
        },
        "tmr0.tdr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "tdr",
                    "lsb": 0,
                    "nbits": 24,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Timer Data Register\nWhen TCSR.TDR_EN is set to 1, the internal 24-bit up-timer value will be loaded into TDR. User can read this register for the up-timer value."
                }
            ],
            "id": "tmr0.tdr",
            "name": "tdr",
            "offset": "0xc",
            "doc": "Timer0 Data Register"
        },
        "tmr1": {
            "type": "blk",
            "children": [],
            "id": "tmr1",
            "name": "tmr1",
            "offset": "0x40010020",
            "doc": ""
        },
        "tmr2": {
            "type": "blk",
            "children": [],
            "id": "tmr2",
            "name": "tmr2",
            "offset": "0x40110000",
            "doc": ""
        },
        "tmr3": {
            "type": "blk",
            "children": [],
            "id": "tmr3",
            "name": "tmr3",
            "offset": "0x40110020",
            "doc": ""
        },
        "wdt": {
            "type": "blk",
            "children": [
                "wdt.wtcr"
            ],
            "id": "wdt",
            "name": "wdt",
            "offset": "0x40004000",
            "doc": "Registers group"
        },
        "wdt.wtcr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 11,
                    "nbits": 21,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "wtis",
                    "lsb": 8,
                    "nbits": 3,
                    "access": "read-write",
                    "reset": "7",
                    "doc": "Watchdog Timer Interval Select (write protection bit)\nThese three bits select the timeout interval for the Watchdog timer. \nWTIS\tTimeout Interval Selection\tInterrupt Period\tWTR Timeout Interval (WDT_CLK=12MHz)\t\n000\t2^4 * WDT_CLK\t(2^4 + 1024) * WDT_CLK\t1.33 us ~ 86.67 us\t\n001\t2^6 * WDT_CLK\t(2^6 + 1024) * WDT_CLK\t5.33 us ~ 90.67 us\t\n010\t2^8 * WDT_CLK\t(2^8 + 1024) * WDT_CLK\t21.33 us ~ 106.67 us\t\n011\t2^10 * WDT_CLK\t(2^10 + 1024) * WDT_CLK\t85.33 us ~ 170.67 us\t\n100\t2^12 * WDT_CLK\t(2^12 + 1024) * WDT_CLK\t341.33 us ~ 426.67 us\t\n101\t2^14 * WDT_CLK\t(2^14 + 1024) * WDT_CLK\t1.36 ms ~ 1.45 ms\t\n110\t2^16 * WDT_CLK\t(2^16 + 1024) * WDT_CLK\t5.46 ms ~ 5.55 ms\t\n111\t2^18 * WDT_CLK\t(2^18 + 1024) * WDT_CLK\t21.84 ms ~ 21.93 ms\t"
                },
                {
                    "name": "wte",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Watchdog Timer Enable\n0= Disable the Watchdog timer (This action will reset the internal counter)\n1= Enable the Watchdog timer"
                },
                {
                    "name": "wtie",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Watchdog Timer Interrupt Enable\n0= Disable the Watchdog timer interrupt\n1= Enable the Watchdog timer interrupt"
                },
                {
                    "name": "wtwkf",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Watchdog Timer Wakeup Flag\nIf Watchdog timer causes CPU wakes up from power-down mode, this bit will be set to high. It must be cleared by software with a write 1 to this bit.\n1 = CPU wake up from sleep or power-down mode by Watchdog timeout.\n0 = Watchdog timer does not cause CPU wakeup.\nNOTE: Write 1 to clear this bit to zero."
                },
                {
                    "name": "wtwke",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Watchdog Timer Wakeup Function Enable bit\n0 = Disable Watchdog timer Wakeup CPU function.\n1 = Enable the Wakeup function that Watchdog timer timeout can wake up CPU from power-down mode."
                },
                {
                    "name": "wtif",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Watchdog Timer Interrupt Flag\nIf the Watchdog timer interrupt is enabled, then the hardware will set this bit to indicate that the Watchdog timer interrupt has occurred. If the Watchdog timer interrupt is not enabled, then this bit indicates that a timeout period has elapsed.\n0= Watchdog timer interrupt does not occur\n1= Watchdog timer interrupt occurs\nNOTE: Write 1 to clear this bit to zero."
                },
                {
                    "name": "wtrf",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Watchdog Timer Reset Flag\nWhen the Watchdog timer initiates a reset, the hardware will set this bit. This flag can be read by software to determine the source of reset. Software is responsible to clear it manually by writing 1 to it. If WTRE is disabled, then the Watchdog timer has no effect on this bit.\n0= Watchdog timer reset does not occur\n1= Watchdog timer reset occurs\nNOTE: This bit is cleared by writing 1 to this bit."
                },
                {
                    "name": "wtre",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Watchdog Timer Reset Enable\nSetting this bit will enable the Watchdog timer reset function.\n0= Disable Watchdog timer reset function\n1= Enable Watchdog timer reset function"
                },
                {
                    "name": "wtr",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Clear Watchdog Timer \nSet this bit will clear the Watchdog timer. \n0= Writing 0 to this bit has no effect\n1= Reset the contents of the Watchdog timer\nNOTE: This bit will auto clear after few clock cycle"
                }
            ],
            "id": "wdt.wtcr",
            "name": "wtcr",
            "offset": "0x0",
            "doc": "Watchdog Timer Control Register"
        },
        "spi0": {
            "type": "blk",
            "children": [
                "spi0.spi_cntrl",
                "spi0.spi_divider",
                "spi0.spi_ssr",
                "spi0.spi_rx0",
                "spi0.spi_rx1",
                "spi0.spi_tx0",
                "spi0.spi_tx1",
                "spi0.spi_varclk"
            ],
            "id": "spi0",
            "name": "spi0",
            "offset": "0x40030000",
            "doc": "Registers group"
        },
        "spi0.spi_cntrl": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "varclk_en",
                    "lsb": 23,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Variable Clock Enable (master only)\n1 = The serial clock output frequency is variable. The output frequency is decided by the value of VARCLK, DIVIDER, and DIVIDER2.\n0 = The serial clock output frequency is fixed and decided only by the value of DIVIDER. \nNote that when enable this VARCLK_EN bit, the setting of TX_BIT_LEN must be programmed as 0x10 (16 bits mode)"
                },
                {
                    "name": "rsvd0",
                    "lsb": 21,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "reorder",
                    "lsb": 19,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Reorder Mode Select\n00 = Disable both byte reorder and byte suspend functions.\n01 = Enable byte reorder function and insert a byte suspend interval (2~17 SPICLK cycles) among each byte. The setting of TX_BIT_LEN must be configured as 0x00. (32 bits/word).\n10 = Enable byte reorder function, but disable byte suspend function.\n11 = Disable byte reorder function, but insert a suspend interval (2~17 SPICLK cycles) among each byte. The setting of TX_BIT_LEN must be configured as 0x00. (32 bits/word).\nByte reorder function is only available if TX_BIT_LEN is defined as 16, 24 and 32."
                },
                {
                    "name": "slave",
                    "lsb": 18,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "SLAVE Mode Indication\n1 = Slave mode.\n0 = Master mode."
                },
                {
                    "name": "ie",
                    "lsb": 17,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Interrupt Enable\n1 = Enable MICROWIRE/SPI Interrupt.\n0 = Disable MICROWIRE/SPI Interrupt."
                },
                {
                    "name": "if",
                    "lsb": 16,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Interrupt Flag\n1 = It indicates that the transfer is done. The interrupt flag is set if it was enable.\n0 = It indicates that the transfer does not finish yet.\nNOTE: This bit can be cleared by writing 1 to itself."
                },
                {
                    "name": "sp_cycle",
                    "lsb": 12,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Suspend Interval (master only)\nThese four bits provide configurable suspend interval between two successive transmit/receive transactions in a transfer. The suspend interval is from the last falling clock edge of the current transaction to the first rising clock edge of the successive transaction if CLKP = 0. If CLKP = 1, the interval is from the rising clock edge to the falling clock edge. The default value is 0x0. When TX_NUM = 00b, setting this field has no effect on transfer. The desired suspend interval is obtained according to the following equation:\n(SP_CYCLE[3:0] + 2)*period of SPI clock\nSP_CYCLE = 0x0 ... 2 SPICLK clock cycle\nSP_CYCLE = 0x1 ... 3 SPICLK clock cycle\n......\nSP_CYCLE = 0xe ... 16 SPICLK clock cycle\nSP_CYCLE = 0xf ... 17 SPICLK clock cycle"
                },
                {
                    "name": "clkp",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Clock Polarity\n1 = SPICLK idle high.\n0 = SPICLK idle low."
                },
                {
                    "name": "lsb",
                    "lsb": 10,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "LSB First\n1 = The LSB is sent first on the line (bit 0 of SPI_TX0/1), and the first bit received from the line will be put in the LSB position of the RX register (bit 0 of SPI_RX0/1).\n0 = The MSB is transmitted/received first (which bit in SPI_TX0/1 and SPI_RX0/1 register that is depends on the TX_BIT_LEN field)."
                },
                {
                    "name": "tx_num",
                    "lsb": 8,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Numbers of Transmit/Receive Word\nThis field specifies how many transmit/receive word numbers should be executed in one transfer.\n00 = Only one transmit/receive word will be executed in one transfer.\n01 = Two successive transmit/receive words will be executed in one transfer. (burst mode)\n10 = Reserved.\n11 = Reserved."
                },
                {
                    "name": "tx_bit_len",
                    "lsb": 3,
                    "nbits": 5,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Transmit Bit Length\nThis field specifies how many bits are transmitted in one transaction. Up to 32 bits can be transmitted.\nTX_BIT_LEN = 0x01 ... 1 bit\nTX_BIT_LEN = 0x02 ... 2 bits\n......\nTX_BIT_LEN = 0x1f ... 31 bits\nTX_BIT_LEN = 0x00 .. 32 bits"
                },
                {
                    "name": "tx_neg",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "Transmit At Negative Edge\n1 = The transmitted data output signal is changed at the falling edge of SPICLK.\n0 = The transmitted data output signal is changed at the rising edge of SPICLK."
                },
                {
                    "name": "rx_neg",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Receive At Negative Edge\n1 = The received data input signal is latched at the falling edge of SPICLK.\n0 = The received data input signal is latched at the rising edge of SPICLK."
                },
                {
                    "name": "go_busy",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Go and Busy Status\n1 = In master mode, writing 1 to this bit to start the SPI data transfer; in slave mode, writing 1 to this bit indicates that the slave is ready to communicate with a master.\n0 = Writing 0 to this bit to stop data transfer if SPI is transferring.\nDuring the data transfer, this bit keeps the value of 1. As the transfer is finished, this bit will be cleared automatically.\nNOTE: All registers should be set before writing 1 to this GO_BUSY bit. The transfer result will be unpredictable if software changes related settings when GO_BUSY bit is 1."
                }
            ],
            "id": "spi0.spi_cntrl",
            "name": "spi_cntrl",
            "offset": "0x0",
            "doc": "Control and Status Register"
        },
        "spi0.spi_divider": {
            "type": "reg",
            "fields": [
                {
                    "name": "divider2",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Clock Divider 2 Register (master only) \nThe value in this field is the 2nd frequency divider of the system clock, PCLK, to generate the serial clock on the output SPICLK. The desired frequency is obtained according to the following equation:\nfsclk = fpclk / ((DIVIDER2+1)*2)"
                },
                {
                    "name": "divider",
                    "lsb": 0,
                    "nbits": 16,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Clock Divider Register (master only) \nThe value in this field is the frequency divider of the system clock, PCLK, to generate the serial clock on the output SPICLK. The desired frequency is obtained according to the following equation:\nfsclk = fpclk / ((DIVIDER+1)*2)\nIn slave mode, the period of SPI clock driven by a master shall equal or over 5 times the period of PCLK. In other words, the maximum frequency of SPI clock is the fifth of the frequency of slave's PCLK."
                }
            ],
            "id": "spi0.spi_divider",
            "name": "spi_divider",
            "offset": "0x4",
            "doc": "Clock Divider Register"
        },
        "spi0.spi_ssr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 6,
                    "nbits": 26,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ltrig_flag",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Level Trigger Flag\nWhen the SS_LTRIG bit is set in slave mode, this bit can be read to indicate the received bit number is met the requirement or not.\n1 = The transaction number and the transferred bit length met the specified requirements which defined in TX_NUM and TX_BIT_LEN.\n0 = The transaction number or the transferred bit length of one transaction doesn't meet the specified requirements.\nNote: This bit is READ only"
                },
                {
                    "name": "ss_ltrig",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Slave Select Level Trigger (slave only)\n1: The slave select signal will be level-trigger. It depends on SS_LVL to decide the signal is active low or active high.\n0: The input slave select signal is edge-trigger. This is default value."
                },
                {
                    "name": "autoss",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Automatic Slave Select (master only)\n1 = If this bit is set, SPISSx signal is generated automatically. It means that slave select signal will be asserted by the SPI controller when transmit/receive is started by setting GO_BUSY, and is de-asserted after each transmit/receive is finished.\n0 = If this bit is cleared, slave select signal will be asserted and de-asserted by setting and clearing SSR[0]."
                },
                {
                    "name": "ss_lvl",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Slave Select Active Level\nIt defines the active level of slave select signal (SPISSx). \n1 = The slave select signal SPISSx is active at high-level/rising-edge.\n0 = The slave select signal SPISSx is active at low-level/falling-edge."
                },
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "ssr",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Slave Select Register (master only)\nIf AUTOSS bit is cleared, writing 1 to this bit sets the SPISSx line to active state and writing 0 sets the line back to inactive state.\nIf AUTOSS bit is set, writing 1 to this bit will select the SPISSx line to be automatically driven to active state for the duration of the transmit/receive, and will be driven to inactive state for the rest of the time. (The active level of SPISSx0/1 is specified in SS_LVL)."
                }
            ],
            "id": "spi0.spi_ssr",
            "name": "spi_ssr",
            "offset": "0x8",
            "doc": "Slave Select Register"
        },
        "spi0.spi_rx0": {
            "type": "reg",
            "fields": [
                {
                    "name": "rx",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Data Receive Register\nThe Data Receive Registers hold the value of received data of the last executed transfer. The number of valid bits depend on the transmit bit length field in the SPI_CNTRL register. For example, if TX_BIT_LEN is set to 0x08 and TX_NUM is set to 0x0, bit RX0[7:0] holds the received data.\nNOTE: The Data Receive Registers are read only registers."
                }
            ],
            "id": "spi0.spi_rx0",
            "name": "spi_rx0",
            "offset": "0x10",
            "doc": "Data Receive Register 0"
        },
        "spi0.spi_rx1": {
            "type": "reg",
            "fields": [
                {
                    "name": "rx",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Data Receive Register\nThe Data Receive Registers hold the value of received data of the last executed transfer. The number of valid bits depend on the transmit bit length field in the SPI_CNTRL register. For example, if TX_BIT_LEN is set to 0x08 and TX_NUM is set to 0x0, bit RX0[7:0] holds the received data.\nNOTE: The Data Receive Registers are read only registers."
                }
            ],
            "id": "spi0.spi_rx1",
            "name": "spi_rx1",
            "offset": "0x14",
            "doc": "Data Receive Register 1"
        },
        "spi0.spi_tx0": {
            "type": "reg",
            "fields": [
                {
                    "name": "tx",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "write-only",
                    "reset": "0",
                    "doc": "Data Transmit Register\nThe Data Transmit Registers hold the data to be transmitted in the next transfer. The number of valid bits depend on the transmit bit length field in the CNTRL register. \nFor example, if TX_BIT_LEN is set to 0x08 and the TX_NUM is set to 0x0, the bit TX0[7:0] will be transmitted in next transfer. If TX_BIT_LEN is set to 0x00 and TX_NUM is set to 0x1, the core will perform two successive 32-bit transmit/receive using the same setting (the order is TX0[31:0], TX1[31:0])."
                }
            ],
            "id": "spi0.spi_tx0",
            "name": "spi_tx0",
            "offset": "0x20",
            "doc": "Data Transmit Register 0"
        },
        "spi0.spi_tx1": {
            "type": "reg",
            "fields": [
                {
                    "name": "tx",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "write-only",
                    "reset": "0",
                    "doc": "Data Transmit Register\nThe Data Transmit Registers hold the data to be transmitted in the next transfer. The number of valid bits depend on the transmit bit length field in the CNTRL register. \nFor example, if TX_BIT_LEN is set to 0x08 and the TX_NUM is set to 0x0, the bit TX0[7:0] will be transmitted in next transfer. If TX_BIT_LEN is set to 0x00 and TX_NUM is set to 0x1, the core will perform two successive 32-bit transmit/receive using the same setting (the order is TX0[31:0], TX1[31:0])."
                }
            ],
            "id": "spi0.spi_tx1",
            "name": "spi_tx1",
            "offset": "0x24",
            "doc": "Data Transmit Register 1"
        },
        "spi0.spi_varclk": {
            "type": "reg",
            "fields": [
                {
                    "name": "varclk",
                    "lsb": 0,
                    "nbits": 32,
                    "access": "read-write",
                    "reset": "8388487",
                    "doc": "Variable Clock Pattern \nThe value in this field is the frequency patterns of the SPI clock. If the bit patterns of VARCLK are 0, the output frequency of SPICLK is according the value of DIVIDER. If the bit patterns of VARCLK are 1, the output frequency of SPICLK is according the value of DIVIDER2. Refer to register SPI_DIVIDER."
                }
            ],
            "id": "spi0.spi_varclk",
            "name": "spi_varclk",
            "offset": "0x34",
            "doc": "Variable Clock Pattern Register"
        },
        "spi1": {
            "type": "blk",
            "children": [],
            "id": "spi1",
            "name": "spi1",
            "offset": "0x40034000",
            "doc": ""
        },
        "uart0": {
            "type": "blk",
            "children": [
                "uart0.ua_rbr",
                "uart0.ua_thr",
                "uart0.ua_ier",
                "uart0.ua_fcr",
                "uart0.ua_lcr",
                "uart0.ua_mcr",
                "uart0.ua_msr",
                "uart0.ua_fsr",
                "uart0.ua_isr",
                "uart0.ua_tor",
                "uart0.ua_baud",
                "uart0.ua_ircr",
                "uart0.ua_act_csr",
                "uart0.ua_fun_sel"
            ],
            "id": "uart0",
            "name": "uart0",
            "offset": "0x40050000",
            "doc": "Registers group"
        },
        "uart0.ua_rbr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "_8_bitreceiveddata",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Receive Buffer Register\nBy reading this register, the UART will return an 8-bit data received from Rx pin (LSB first)."
                }
            ],
            "id": "uart0.ua_rbr",
            "name": "ua_rbr",
            "offset": "0x0",
            "doc": "UART0 Receive Buffer Register."
        },
        "uart0.ua_thr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 8,
                    "nbits": 24,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "_8_bittransmitteddata",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "write-only",
                    "reset": "0",
                    "doc": "Transmit Holding Register\nBy writing to this register, the UART will send out an 8-bit data through the Tx pin (LSB first)."
                }
            ],
            "id": "uart0.ua_thr",
            "name": "ua_thr",
            "offset": "0x0",
            "doc": "UART0 Transmit Holding Register."
        },
        "uart0.ua_ier": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 14,
                    "nbits": 18,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "auto_cts_en",
                    "lsb": 13,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "CTS Auto Flow Control Enable\n1 = Enable CTS auto flow control.\n0 = Disable CTS auto flow control.\nWhen CTS auto-flow is enabled, the UART will send data to external device when CTS input assert (UART will not send data to device until CTS is asserted)."
                },
                {
                    "name": "auto_rts_en",
                    "lsb": 12,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "RTS Auto Flow Control Enable \n1 = Enable RTS auto flow control.\n0 = Disable RTS auto flow control.\nWhen RTS auto-flow is enabled, if the number of bytes in the Rx FIFO equals the UA_FCR [RTS_Tri_Lev], the UART will dessert RTS signal."
                },
                {
                    "name": "time_out_en",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Time-Out Counter Enable\n1 = Enable Time-out counter.\n0 = Disable Time-out counter."
                },
                {
                    "name": "rsvd0",
                    "lsb": 7,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "wake_en",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Wake up CPU function enable \n0 = Disable UART wake up CPU function\n1 = Enable wake up function, when the system is in deep sleep mode, an external /CTS change will wake up CPU from deep sleep mode."
                },
                {
                    "name": "buf_err_ien",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Buffer Error Interrupt Enable\n0 = Mask off INT_Buf_err\n1 = Enable INT_Buf_err"
                },
                {
                    "name": "rto_ien",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Rx Time out Interrupt Enable\n0 = Mask off INT_tout\n1 = Enable INT_tout "
                },
                {
                    "name": "modem_ien",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Modem Status Interrupt Enable \n0 = Mask off INT_MOS\n1 = Enable INT_MOS"
                },
                {
                    "name": "rls_ien",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Receive Line Status Interrupt Enable \n0 = Mask off INT_RLS\n1 = Enable INT_RLS"
                },
                {
                    "name": "thre_ien",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Transmit Holding Register Empty Interrupt Enable\n0 = Mask off INT_THRE\n1 = Enable INT_THRE"
                },
                {
                    "name": "rda_ien",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Receive Data Available Interrupt Enable.\n0 = Mask off INT_RDA\n1 = Enable INT_RDA"
                }
            ],
            "id": "uart0.ua_ier",
            "name": "ua_ier",
            "offset": "0x4",
            "doc": "UART0 Interrupt Enable Register."
        },
        "uart0.ua_fcr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd3",
                    "lsb": 20,
                    "nbits": 12,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rts_tri_lev",
                    "lsb": 16,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Word Length Select\nRTS_Tri_Lev\tTrigger Level(Bytes)\t\n0000\t01\t\n0001\t04\t\n0010\t08\t\n0011\t14\t"
                },
                {
                    "name": "rsvd1",
                    "lsb": 9,
                    "nbits": 7,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rx_dis",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "Receiver Disable register.\nThe receiver is disabled or not (set 1 is disable receiver)\n1: Disable Receiver\n0: Enable Receiver\nNote: This field is used for RS-485 Normal Multi-drop mode. It should be programmed before RS-485 enable function in UA_FUN_SEL. FUN_SEL is programmed."
                },
                {
                    "name": "rfitl",
                    "lsb": 4,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Word Length Select\nRFITL\tINTR_RDA Tigger Level(Bytes)\t\n0000\t01\t\n0001\t04\t\n0010\t08\t\n0011\t14\t"
                },
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "tfr",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Tx Software Reset\nWhen Tx_RST is set, all the bytes in the transmit FIFO and Tx internal state machine are cleared.\n0 = Writing 0 to this bit has no effect.\n1 = Writing 1 to this bit will reset the Tx internal state machine and pointers.\nNote: This bit will auto clear and takes at least 3 UART engine clock cycles."
                },
                {
                    "name": "rfr",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Rx Software Reset\nWhen Rx_RST is set, all the bytes in the transmit FIFO and Rx internal state machine are cleared.\n0 = Writing 0 to this bit has no effect.\n1 = Writing 1 to this bit will reset the Rx internal state machine and pointers.\nNote: This bit will auto clear and takes at least 3 UART engine clock cycles."
                },
                {
                    "name": "rsvd2",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "uart0.ua_fcr",
            "name": "ua_fcr",
            "offset": "0x8",
            "doc": "UART0 FIFO Control Register."
        },
        "uart0.ua_lcr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 7,
                    "nbits": 25,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "bcb",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Break Control Bit \nWhen this bit is set to logic 1, the serial data output (Tx) is forced to the Spacing State (logic 0). This bit acts only on Tx and has no effect on the transmitter logic."
                },
                {
                    "name": "spe",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Stick Parity Enable \n0 = Disable stick parity \n1 = When bits PBE , EPE and SPE are set, the parity bit is transmitted and checked as cleared. When PBE and SPE are set and EPE is cleared, the parity bit is transmitted and checked as set."
                },
                {
                    "name": "epe",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Even Parity Enable\n0 = Odd number of logic 1's are transmitted or checked in the data word and parity bits.\n1 = Even number of logic 1's are transmitted or checked in the data word and parity bits.\nThis bit has effect only when bit 3 (parity bit enable) is set."
                },
                {
                    "name": "pbe",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Parity Bit Enable\n0 = Parity bit is not generated (transmit data) or checked (receive data) during transfer.\n1 = Parity bit is generated or checked between the \"last data word bit\" and \"stop bit\" of the serial data."
                },
                {
                    "name": "nsb",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Number of \"STOP bit\"\n0= One \"STOP bit\" is generated in the transmitted data\n1= One and a half \"STOP bit\" is generated in the transmitted data when 5-bit word length is selected;\nTwo \"STOP bit\" is generated when 6-, 7- and 8-bit word length is selected."
                },
                {
                    "name": "wls",
                    "lsb": 0,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Word Length Select\nWLS[1:0]\tCharacter length\t\n00\t5 bits\t\n01\t6 bits\t\n10\t7 bits\t\n11\t8 bits\t"
                }
            ],
            "id": "uart0.ua_lcr",
            "name": "ua_lcr",
            "offset": "0xc",
            "doc": "UART0 Line Control Register."
        },
        "uart0.ua_mcr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd3",
                    "lsb": 14,
                    "nbits": 18,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rts_st",
                    "lsb": 13,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "RTS Pin State \nThis bit is the pin status of RTS."
                },
                {
                    "name": "rsvd1",
                    "lsb": 10,
                    "nbits": 3,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "lev_rts",
                    "lsb": 9,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "RTS Trigger Level \nThis bit can change the RTS trigger level.\n0= low level triggered\n1= high level triggered"
                },
                {
                    "name": "rsvd0",
                    "lsb": 2,
                    "nbits": 7,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rts",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "RTS (Request-To-Send) Signal \n0: Drive RTS pin to logic 1 (If the Lev_RTS set to low level triggered).\n1: Drive RTS pin to logic 0 (If the Lev_RTS set to low level triggered).\n0: Drive RTS pin to logic 0 (If the Lev_RTS set to high level triggered).\n1: Drive RTS pin to logic 1 (If the Lev_RTS set to high level triggered)."
                },
                {
                    "name": "rsvd2",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "uart0.ua_mcr",
            "name": "ua_mcr",
            "offset": "0x10",
            "doc": "UART0 Modem Control Register."
        },
        "uart0.ua_msr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd2",
                    "lsb": 9,
                    "nbits": 23,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "lev_cts",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "CTS Trigger Level\nThis bit can change the CTS trigger level.\n0= low level triggered\n1= high level triggered"
                },
                {
                    "name": "rsvd1",
                    "lsb": 5,
                    "nbits": 3,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "cts_st",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "CTS Pin Status \nThis bit is the pin status of CTS. "
                },
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 3,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dctsf",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Detect CTS State Change Flag \nThis bit is set whenever CTS input has change state, and it will generate Modem interrupt to CPU when IER [Modem_IEN].\nNOTE: This bit is cleared by writing 1 to itself."
                }
            ],
            "id": "uart0.ua_msr",
            "name": "ua_msr",
            "offset": "0x14",
            "doc": "UART0 Modem Status Register."
        },
        "uart0.ua_fsr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd3",
                    "lsb": 29,
                    "nbits": 3,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "te_flag",
                    "lsb": 28,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "1",
                    "doc": "Transmitter Empty Flag (Read Only)\nBit is set by hardware when Tx FIFO(UA_THR) is empty and the STOP bit of the last byte has been transmitted.\nBit is cleared automatically when Tx FIFO is not empty or the last byte transmission has not completed.\nNOTE: This bit is read only. "
                },
                {
                    "name": "rsvd2",
                    "lsb": 25,
                    "nbits": 3,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "tx_over_if",
                    "lsb": 24,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Tx Overflow Error Interrupt Flag (Read Only)\nIf Tx FIFO(UA_THR) is full, an additional write to UA_THR will cause this bit to logic 1. \nNOTE: This bit is cleared by writing 1 to itself."
                },
                {
                    "name": "tx_full",
                    "lsb": 23,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Transmitter FIFO Full (Read Only)\nThis bit indicates Tx FIFO full or not.\nThis bit is set when Tx_Pointer is equal to 64/16(UART0/UART1), otherwise is cleared by hardware."
                },
                {
                    "name": "tx_empty",
                    "lsb": 22,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "1",
                    "doc": "Transmitter FIFO Empty (Read Only)\nThis bit indicates Tx FIFO empty or not.\nWhen the last byte of Tx FIFO has been transferred to Transmitter Shift Register, hardware sets this bit high. It will be cleared when writing data into THR (Tx FIFO not empty)."
                },
                {
                    "name": "tx_pointer",
                    "lsb": 16,
                    "nbits": 6,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "TX FIFO Pointer (Read Only)\nThis field indicates the Tx FIFO Buffer Pointer. When CPU write one byte into UA_THR, Tx_Pointer increases one. When one byte of Tx FIFO is transferred to Transmitter Shift Register, Tx_Pointer decreases one."
                },
                {
                    "name": "rx_full",
                    "lsb": 15,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Receiver FIFO Full (Read Only)\nThis bit initiates Rx FIFO full or not.\nThis bit is set when Rx_Pointer is equal to 16(UART0/UART1), otherwise is cleared by hardware."
                },
                {
                    "name": "rx_empty",
                    "lsb": 14,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "1",
                    "doc": "Receiver FIFO Empty (Read Only)\nThis bit initiate Rx FIFO empty or not.\nWhen the last byte of Rx FIFO has been read by CPU, hardware sets this bit high. It will be cleared when UART receives any new data."
                },
                {
                    "name": "rx_pointer",
                    "lsb": 8,
                    "nbits": 6,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Rx FIFO pointer (Read Only)\nThis field indicates the Rx FIFO Buffer Pointer. When UART receives one byte from external device, Rx_Pointer increases one. When one byte of Rx FIFO is read by CPU, Rx_Pointer decreases one."
                },
                {
                    "name": "rsvd1",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "bif",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Break Interrupt Flag\nThis bit is set to a logic 1 whenever the received data input(Rx) is held in the \"spacing state\" (logic 0) for longer than a full word transmission time (that is, the total time of \"start bit\" + data bits + parity + stop bits) and is reset whenever the CPU writes 1 to this bit."
                },
                {
                    "name": "fef",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Framing Error Flag\nThis bit is set to logic 1 whenever the received character does not have a valid \"stop bit\" (that is, the stop bit following the last data bit or parity bit is detected as a logic 0), and is reset whenever the CPU writes 1 to this bit."
                },
                {
                    "name": "pef",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Parity Error Flag\nThis bit is set to logic 1 whenever the received character does not have a valid \"parity bit\", and is reset whenever the CPU writes 1 to this bit."
                },
                {
                    "name": "rs_485_add_det",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "RS-485 Address Byte Detection Flag\nThis bit is set to logic 1 and set UA_RS-485_CSR [RS-485_Add_EN] whenever in RS-485 mode the receiver detect any address byte received address byte character (bit9 = '1') bit\", and it is reset whenever the CPU writes 1 to this bit.\nNote: This field is used for RS-485 mode."
                },
                {
                    "name": "rsvd0",
                    "lsb": 1,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rx_over_if",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Rx overflow Error IF (Read Only) \nThis bit is set when Rx FIFO overflow.\nIf the number of bytes of received data is greater than Rx FIFO(UA_RBR) size, 16 bytes of UART0/UART1, this bit will be set.\nNOTE: This bit is cleared by writing 1 to itself."
                }
            ],
            "id": "uart0.ua_fsr",
            "name": "ua_fsr",
            "offset": "0x18",
            "doc": "UART0 FIFO Status Register."
        },
        "uart0.ua_isr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 14,
                    "nbits": 18,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "buf_err_int",
                    "lsb": 13,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Buffer Error Interrupt Indicator to Interrupt Controller (INT_Buf_err)\nAn AND output with inputs of BUF_ERR_IEN and Buf_Err_IF"
                },
                {
                    "name": "tout_int",
                    "lsb": 12,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Time Out Interrupt Indicator to Interrupt Controller (INT_Tout)\nAn AND output with inputs of RTO_IEN and Tout_IF"
                },
                {
                    "name": "modem_int",
                    "lsb": 11,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "MODEM Status Interrupt Indicator to Interrupt Controller (INT_MOS). \nAn AND output with inputs of Modem_IEN and Modem_IF"
                },
                {
                    "name": "rls_int",
                    "lsb": 10,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Receive Line Status Interrupt Indicator to Interrupt Controller (INT_RLS). \nAn AND output with inputs of RLS_IEN and RLS_IF\nNote: In RS-485 mode, the field includes RS-485 Address Byte Detection Flag."
                },
                {
                    "name": "thre_int",
                    "lsb": 9,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Transmit Holding Register Empty Interrupt Indicator to Interrupt Controller (INT_THRE).\nAn AND output with inputs of THRE_IEN and THRE_IF"
                },
                {
                    "name": "rda_int",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Receive Data Available Interrupt Indicator to Interrupt Controller (INT_RDA).\nAn AND output with inputs of RDA_IEN and RDA_IF"
                },
                {
                    "name": "rsvd0",
                    "lsb": 6,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "buf_err_if",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Buffer Error Interrupt Flag (Read Only)\nThis bit is set when the Tx or Rx FIFO overflows (Tx_Over_IF or Rx_Over_IF is set). When Buf_Err_IF is set, the transfer maybe not correct. If IER[Buf_Err_IEN] is enabled, the buffer error interrupt will be generated.\nNOTE: This bit is cleared when both Tx_Over_IF and Rx_Over_IF are cleared. "
                },
                {
                    "name": "tout_if",
                    "lsb": 4,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Time Out Interrupt Flag (Read Only)\nThis bit is set when the Rx FIFO is not empty and no activities occur in the Rx FIFO and the time out counter equal to TOIC. If IER [Tout_IEN] is enabled, the Tout interrupt will be generated. \nNOTE: This bit is read only and user can read UA_RBR (Rx is in active) to clear it."
                },
                {
                    "name": "modem_if",
                    "lsb": 3,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "MODEM Interrupt Flag (Read Only) \nThis bit is set when the CTS pin has state change (DCTSF=1). If IER[Modem_IEN] is enabled, the Modem interrupt will be generated.\nNOTE: This bit is read only and reset to 0 when bit DCTSF is cleared by a write 1 on DCTSF."
                },
                {
                    "name": "rls_if",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Receive Line Interrupt Flag (Read Only).\nIn UART mode this bit is set when the Rx receive data have parity error, framing error or break error (at least one of 3 bits, BIF, FEF and PEF, is set). In RS-485 mode, the field includes RS-485 Address Byte Detection Flag. If IER[RLS_IEN] is enabled, the RLS interrupt will be generated.\nNOTE: This bit is read only and reset to 0 when all bits of BIF, FEF, PEF and RS-485_Add_Det are cleared."
                },
                {
                    "name": "thre_if",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "1",
                    "doc": "Transmit Holding Register Empty Interrupt Flag (Read Only). \nThis bit is set when the last data of Tx FIFO is transferred to Transmitter Shift Register. If IER[THRE_IEN] is enabled, the THRE interrupt will be generated.\nNOTE: This bit is read only and it will be cleared when writing data into THR (Tx FIFO not empty)."
                },
                {
                    "name": "rda_if",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "read-only",
                    "reset": "0",
                    "doc": "Receive Data Available Interrupt Flag (Read Only).\nWhen the number of bytes in the Rx FIFO equals the RFITL then the RDA_IF will be set. If IER[RDA_IEN] is enabled, the RDA interrupt will be generated. \nNOTE: This bit is read only and it will be cleared when the number of unread bytes of Rx FIFO drops below the threshold level (RFITL)."
                }
            ],
            "id": "uart0.ua_isr",
            "name": "ua_isr",
            "offset": "0x1c",
            "doc": "UART0 Interrupt Status Register."
        },
        "uart0.ua_tor": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 16,
                    "nbits": 16,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "dly",
                    "lsb": 8,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "TX Delay time value\nThis field is use to programming the transfer delay time between the last stop bit leaving the TX-FIFO and the de-assertion of by setting UA_TOR. DLY register."
                },
                {
                    "name": "rsvd0",
                    "lsb": 7,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "toic",
                    "lsb": 0,
                    "nbits": 7,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Time Out Interrupt Comparator\nThe time out counter resets and starts counting (the counting clock = baud rate) whenever the RX FIFO receives a new data word. Once the content of time out counter (TOUT_CNT) is equal to that of time out interrupt comparator (TOIC), a receiver time out interrupt (INT_TOUT) is generated if UA_IER [RTO_IEN]. A new incoming data word or RX FIFO empty clears INT_TOUT."
                }
            ],
            "id": "uart0.ua_tor",
            "name": "ua_tor",
            "offset": "0x20",
            "doc": "UART0 Time Out Register"
        },
        "uart0.ua_baud": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd1",
                    "lsb": 30,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "div_x_en",
                    "lsb": 29,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Divider X Enable\nThe BRD = Baud Rate Divider, and the baud rate equation is \nBaud Rate = Clock / [ M * (BRD + 2) ] ; The default value of M is 16.\n0 = Disable divider X (the equation of M = 16)\n1 = Enable divider X (the equation of M = X+1, but Divider_X[27:24 must > 8).\nNOTE: When in IrDA mode, this bit must disable.\nMode\tDIV_X_EN \tDIV_X_ONE \tDIVIDER X \tBRD \tBaud rate equation \t\n0 \tDisable \t0 \tB\tA\tUART_CLK / [16 * (A+2)]\t\n1 \tEnable \t0 \tB\tA\tUART_CLK/[(B+1)*(A+2)],B must >= 8\t\n2 \tEnable \t1\tDon't Care\tA\tUART_CLK / (A+2), A must >=3\t"
                },
                {
                    "name": "div_x_one",
                    "lsb": 28,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Divider X equal 1\n0 = Divider M = X (the equation of M = X+1, but Divider_X[27:24] must > 8)\n1 = Divider M = 1 (the equation of M = 1, but BRD[15:0] must > 3).\nMode\tDIV_X_EN \tDIV_X_ONE \tDIVIDER X \tBRD \tBaud rate equation \t\n0 \tDisable \t0 \tB\tA\tUART_CLK / [16 * (A+2)]\t\n1 \tEnable \t0 \tB\tA\tUART_CLK/[(B+1)*(A+2)],B must >= 8\t\n2 \tEnable \t1\tDon't Care\tA\tUART_CLK / (A+2), A must >=3\t"
                },
                {
                    "name": "divider_x",
                    "lsb": 24,
                    "nbits": 4,
                    "access": "read-write",
                    "reset": "15",
                    "doc": "Divider X\nThe baud rate divider M = X+1."
                },
                {
                    "name": "rsvd0",
                    "lsb": 16,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "brd_highbyte",
                    "lsb": 8,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Baud Rate Divider \nThe high byte of the baud rate divider"
                },
                {
                    "name": "brd_lowbyte",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Baud Rate Divider \nThe low byte of the baud rate divider"
                }
            ],
            "id": "uart0.ua_baud",
            "name": "ua_baud",
            "offset": "0x24",
            "doc": "UART0 Baud Rate Divisor Register"
        },
        "uart0.ua_ircr": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd2",
                    "lsb": 7,
                    "nbits": 25,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "inv_rx",
                    "lsb": 6,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "1",
                    "doc": "INV_Rx\n1= Inverse Rx input signal\n0= No inversion"
                },
                {
                    "name": "inv_tx",
                    "lsb": 5,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "INV_Tx\n1= Inverse Tx output signal\n0= No inversion"
                },
                {
                    "name": "rsvd0",
                    "lsb": 3,
                    "nbits": 2,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "lb",
                    "lsb": 2,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "IrDA loop back mode for self test.\n1: Enable IrDA loop back mode\n0: Disable IrDA loop back mode"
                },
                {
                    "name": "tx_select",
                    "lsb": 1,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Tx_SELECT\n1: Enable IrDA transmitter\n0: Enable IrDA receiver"
                },
                {
                    "name": "rsvd1",
                    "lsb": 0,
                    "nbits": 1,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "uart0.ua_ircr",
            "name": "ua_ircr",
            "offset": "0x28",
            "doc": "UART0 IrDA Control Register."
        },
        "uart0.ua_act_csr": {
            "type": "reg",
            "fields": [
                {
                    "name": "addr_match",
                    "lsb": 24,
                    "nbits": 8,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Address match value register\nThis field contains the RS-485 address match values.\nNote: This field is used for RS-485 auto address detection mode."
                },
                {
                    "name": "rsvd1",
                    "lsb": 16,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rs_485_add_en",
                    "lsb": 15,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "RS-485 Address Detection Enable\nThis bit is use to enable RS-485 address detection mode. \n1: Enable address detection mode\n0: Disable address detection mode \nNote: This field is used for RS-485 any operation mode."
                },
                {
                    "name": "rsvd0",
                    "lsb": 11,
                    "nbits": 4,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "rs_485_aud",
                    "lsb": 10,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "RS-485 Auto Direction Mode (AUD)\n1: Enable RS-485 Auto Direction Mode (AUD)\n0: Disable RS-485 Auto Direction Mode (AUD)\nNote: It can be active with RS-485_AAD or RS-485_NMM operation mode."
                },
                {
                    "name": "rs_485_aad",
                    "lsb": 9,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "RS-485 Auto Address Detection Operation Mode (AAD)\n1: Enable RS-485 Auto Address Detection Operation Mode (AAD)\n0: Disable RS-485 Auto Address Detection Operation Mode (AAD)\nNote: It can't be active with RS-485_NMM operation mode."
                },
                {
                    "name": "rs_485_nmm",
                    "lsb": 8,
                    "nbits": 1,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "RS-485 Normal Multi-drop Operation Mode (NMM)\n1: Enable RS-485 Normal Multi-drop Operation Mode (NMM)\n0: Disable RS-485 Normal Multi-drop Operation Mode (NMM)\nNote: It can't be active with RS-485_AAD operation mode."
                },
                {
                    "name": "rsvd2",
                    "lsb": 0,
                    "nbits": 8,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                }
            ],
            "id": "uart0.ua_act_csr",
            "name": "ua_act_csr",
            "offset": "0x2c",
            "doc": "UART0 RS485 Control State Register."
        },
        "uart0.ua_fun_sel": {
            "type": "reg",
            "fields": [
                {
                    "name": "rsvd0",
                    "lsb": 2,
                    "nbits": 30,
                    "access": "rsvd",
                    "reset": "0",
                    "doc": "Reserved"
                },
                {
                    "name": "fun_sel",
                    "lsb": 0,
                    "nbits": 2,
                    "access": "read-write",
                    "reset": "0",
                    "doc": "Function Select Enable\n00 = UART Function.\n01 = Reserved.\n10 = Enable IrDA Function.\n11 = Enable RS-485 Function."
                }
            ],
            "id": "uart0.ua_fun_sel",
            "name": "ua_fun_sel",
            "offset": "0x30",
            "doc": "UART0 Function Select Register."
        },
        "uart1": {
            "type": "blk",
            "children": [],
            "id": "uart1",
            "name": "uart1",
            "offset": "0x40150000",
            "doc": ""
        }
    }
}